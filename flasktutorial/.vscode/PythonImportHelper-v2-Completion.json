[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "cowsay",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cowsay",
        "description": "cowsay",
        "detail": "cowsay",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "env.Scripts.activate_this",
        "description": "env.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "env.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "form",
        "kind": 2,
        "importPath": "feedback_form.app",
        "description": "feedback_form.app",
        "peekOfCode": "def form():\n    if request.form == \"POST\" :\n        name = request.form.get(\"name\")\n        if not name :\n            flash(\"Name cannot be empty\")\n            return redirect(url_for(\"form\"))\n        flash(f\"thanks {name} , your feedback was saved\")\n        return render_template(\"thankyou.html\")\n    return render_template(\"form.html\")\n@app.route(\"/thankyou\")",
        "detail": "feedback_form.app",
        "documentation": {}
    },
    {
        "label": "thankyou",
        "kind": 2,
        "importPath": "feedback_form.app",
        "description": "feedback_form.app",
        "peekOfCode": "def thankyou():\n    return render_template(\"thankyou.html\")\n# @app.route(\"/feedback\", methods = [\"post\",\"GET\"])\n# def feedback():\n#     if request.method == \"POST\":\n#         name = request.form.get(\"username\")\n#         message = request.form.get(\"message\")\n#         return render_template(\"thankyou.html\", user = name, message=message)\n#     return render_template(\"feedback.html\")\nif __name__ == \"__main__\":",
        "detail": "feedback_form.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "feedback_form.app",
        "description": "feedback_form.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\", methods = [\"GET\", \"POST\"])\ndef form():\n    if request.form == \"POST\" :\n        name = request.form.get(\"name\")\n        if not name :\n            flash(\"Name cannot be empty\")\n            return redirect(url_for(\"form\"))\n        flash(f\"thanks {name} , your feedback was saved\")\n        return render_template(\"thankyou.html\")",
        "detail": "feedback_form.app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "new_app.app",
        "description": "new_app.app",
        "peekOfCode": "def login():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\")\n        password = request.form.get(\"password\")\n        if username == \"admin\" and password == \"123\":\n            session[\"user\"] = username #stored in session \n            return redirect(url_for(\"welcome\"))\n        else:\n            return Response(\"Invalid credentials. Try again\", mimetype =\"text/plain\") #text/html\n    return '''",
        "detail": "new_app.app",
        "documentation": {}
    },
    {
        "label": "welcome",
        "kind": 2,
        "importPath": "new_app.app",
        "description": "new_app.app",
        "peekOfCode": "def welcome():\n    if \"user\" in session:\n        return   f'''\n                <h2> Welcome, {session[\"user\"]}!</h2>\n                <a href= {url_for('logout')}>Logout</a>\n    '''\n    return redirect(url_for('login'))\n#logout route\n@app.route(\"/logout\")\ndef logout():",
        "detail": "new_app.app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "new_app.app",
        "description": "new_app.app",
        "peekOfCode": "def logout():\n    session.pop(\"user\", None)\n    return redirect(url_for(\"login\"))\n# @app.route(\"/about\")\n# def about():\n#     return  \"this is about page\"\n# @app.route(\"/contact\")\n# def contact():\n#     return \"contact page\"\n# @app.route(\"/submit\", )",
        "detail": "new_app.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "new_app.app",
        "description": "new_app.app",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = \"MUKA\"\n@app.route(\"/\",methods= ['GET', \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\")\n        password = request.form.get(\"password\")\n        if username == \"admin\" and password == \"123\":\n            session[\"user\"] = username #stored in session \n            return redirect(url_for(\"welcome\"))",
        "detail": "new_app.app",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "new_app.app",
        "description": "new_app.app",
        "peekOfCode": "app.secret_key = \"MUKA\"\n@app.route(\"/\",methods= ['GET', \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\")\n        password = request.form.get(\"password\")\n        if username == \"admin\" and password == \"123\":\n            session[\"user\"] = username #stored in session \n            return redirect(url_for(\"welcome\"))\n        else:",
        "detail": "new_app.app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "phase2.app",
        "description": "phase2.app",
        "peekOfCode": "def home():\n    return render_template(\"home.html\")\n@app.route(\"/about\")\ndef about():\n    return render_template(\"about.html\")",
        "detail": "phase2.app",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "phase2.app",
        "description": "phase2.app",
        "peekOfCode": "def about():\n    return render_template(\"about.html\")",
        "detail": "phase2.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "phase2.app",
        "description": "phase2.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef home():\n    return render_template(\"home.html\")\n@app.route(\"/about\")\ndef about():\n    return render_template(\"about.html\")",
        "detail": "phase2.app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "task1.app1",
        "description": "task1.app1",
        "peekOfCode": "def home():\n    reversed_string = None\n    if request.method == 'POST':\n        input_str = request.form.get('input_string', '')\n        reversed_string = input_str[::-1]  # Reverse the string\n    return render_template('index.html', reversed_string = reversed_string)\n@app.route('/api/reverse', methods=['POST'])\ndef reverse_api():\n    data = request.get_json()\n    original = data.get('string', '')",
        "detail": "task1.app1",
        "documentation": {}
    },
    {
        "label": "reverse_api",
        "kind": 2,
        "importPath": "task1.app1",
        "description": "task1.app1",
        "peekOfCode": "def reverse_api():\n    data = request.get_json()\n    original = data.get('string', '')\n    reversed_str = original[::-1]\n    return jsonify({\n        'original': original,\n        'reversed': reversed_str\n    })\nif __name__ == \"__main__\":\n    app.run(debug=True, port=8000)",
        "detail": "task1.app1",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "task1.app1",
        "description": "task1.app1",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', methods = ['GET', 'POST'])\ndef home():\n    reversed_string = None\n    if request.method == 'POST':\n        input_str = request.form.get('input_string', '')\n        reversed_string = input_str[::-1]  # Reverse the string\n    return render_template('index.html', reversed_string = reversed_string)\n@app.route('/api/reverse', methods=['POST'])\ndef reverse_api():",
        "detail": "task1.app1",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "week5test flask.app",
        "description": "week5test flask.app",
        "peekOfCode": "def home():\n    return \"<h2>Hello, World!</h2>\"\nif __name__ == \"__main__\":\n    app.run(debug=True, port =5000)",
        "detail": "week5test flask.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "week5test flask.app",
        "description": "week5test flask.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef home():\n    return \"<h2>Hello, World!</h2>\"\nif __name__ == \"__main__\":\n    app.run(debug=True, port =5000)",
        "detail": "week5test flask.app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "week5test flask.app1",
        "description": "week5test flask.app1",
        "peekOfCode": "def home():\n    name = \"shubham\"\n    return render_template(\"index.html\", username = name)\nif __name__ == \"__main__\":\n    app.run(debug=True, port =5000)",
        "detail": "week5test flask.app1",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "week5test flask.app1",
        "description": "week5test flask.app1",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\", methods = [\"POST\",\"GET\"])\ndef home():\n    name = \"shubham\"\n    return render_template(\"index.html\", username = name)\nif __name__ == \"__main__\":\n    app.run(debug=True, port =5000)",
        "detail": "week5test flask.app1",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "week5test flask.app2",
        "description": "week5test flask.app2",
        "peekOfCode": "def home():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\")\n        session['name']=username\n        return redirect(url_for('welcome'))\n    return '''<h2>Login Page</h2>\n            <form method=\"POST\">\n            Username:<input type = \"text\" name = \"username\"><br>\n            <input type = \"submit\" value = \"enter\">\n            </form>",
        "detail": "week5test flask.app2",
        "documentation": {}
    },
    {
        "label": "welcome",
        "kind": 2,
        "importPath": "week5test flask.app2",
        "description": "week5test flask.app2",
        "peekOfCode": "def welcome():\n    return f\"\"\"\n        welcome {session['name']}\n\"\"\"\nif __name__ == \"__main__\":\n    app.run(debug=True, port =5000)",
        "detail": "week5test flask.app2",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "week5test flask.app2",
        "description": "week5test flask.app2",
        "peekOfCode": "app = Flask(__name__)\napp.secret_key = \"MUKA\"\n@app.route(\"/\", methods = [\"POST\", \"GET\"])\ndef home():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\")\n        session['name']=username\n        return redirect(url_for('welcome'))\n    return '''<h2>Login Page</h2>\n            <form method=\"POST\">",
        "detail": "week5test flask.app2",
        "documentation": {}
    },
    {
        "label": "app.secret_key",
        "kind": 5,
        "importPath": "week5test flask.app2",
        "description": "week5test flask.app2",
        "peekOfCode": "app.secret_key = \"MUKA\"\n@app.route(\"/\", methods = [\"POST\", \"GET\"])\ndef home():\n    if request.method == \"POST\":\n        username = request.form.get(\"username\")\n        session['name']=username\n        return redirect(url_for('welcome'))\n    return '''<h2>Login Page</h2>\n            <form method=\"POST\">\n            Username:<input type = \"text\" name = \"username\"><br>",
        "detail": "week5test flask.app2",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 2,
        "importPath": "week5test flask.app3",
        "description": "week5test flask.app3",
        "peekOfCode": "def select():\n    if request.method == \"POST\":\n        calc_type = request.form[\"calc_type\"]\n        shape = request.form[\"shape\"]\n        return redirect(url_for(\"input_form\", calc_type=calc_type, shape=shape))\n    return render_template(\"selection.html\")\n@app.route(\"/input\", methods=[\"GET\", \"POST\"])\ndef input_form():\n    calc_type = request.args.get(\"calc_type\")\n    shape = request.args.get(\"shape\")",
        "detail": "week5test flask.app3",
        "documentation": {}
    },
    {
        "label": "input_form",
        "kind": 2,
        "importPath": "week5test flask.app3",
        "description": "week5test flask.app3",
        "peekOfCode": "def input_form():\n    calc_type = request.args.get(\"calc_type\")\n    shape = request.args.get(\"shape\")\n    if request.method == \"POST\":\n        data = request.form\n        result = calculate(calc_type, shape, data)\n        return render_template(\"result.html\", result=result)\n    return render_template(\"input_form.html\", calc_type=calc_type, shape=shape)\ndef calculate(calc_type, shape, data):\n    from math import pi",
        "detail": "week5test flask.app3",
        "documentation": {}
    },
    {
        "label": "calculate",
        "kind": 2,
        "importPath": "week5test flask.app3",
        "description": "week5test flask.app3",
        "peekOfCode": "def calculate(calc_type, shape, data):\n    from math import pi\n    try:\n        if shape == \"Circle\":\n            r = float(data[\"radius\"])\n            if calc_type == \"Surface Area\":\n                return f\"The surface area of a circle with radius {r} is {round(pi * r * r, 2)} sq units.\"\n        elif shape == \"Sphere\":\n            r = float(data[\"radius\"])\n            if calc_type == \"Surface Area\":",
        "detail": "week5test flask.app3",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "week5test flask.app3",
        "description": "week5test flask.app3",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef select():\n    if request.method == \"POST\":\n        calc_type = request.form[\"calc_type\"]\n        shape = request.form[\"shape\"]\n        return redirect(url_for(\"input_form\", calc_type=calc_type, shape=shape))\n    return render_template(\"selection.html\")\n@app.route(\"/input\", methods=[\"GET\", \"POST\"])\ndef input_form():",
        "detail": "week5test flask.app3",
        "documentation": {}
    },
    {
        "label": "Todo",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class Todo(db.Model):\n    sno = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    desc = db.Column(db.String(500), nullable=False)\n    date_created = db.Column(db.DateTime(timezone=True),default=lambda: datetime.now(timezone.utc))\n    def __repr__(self) -> str:\n        return f\"{self.sno} - {self.title}\"\n# Ensure DB is created\nwith app.app_context():\n    try:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def home(): \n    if request.method == \"POST\" :\n        # print(\"POST\", request.form['title'])\n        title = request.form['title']\n        desc = request.form['desc']\n        todo = Todo(title = title ,desc = desc )\n        db.session.add(todo)\n        db.session.commit()\n        return redirect(url_for('home'))\n    alltodo = Todo.query.all()",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def delete(sno):\n    todo = Todo.query.filter_by(sno= sno).first()\n    db.session.delete(todo)\n    db.session.commit()\n    return redirect(\"/\")\n@app.route('/update/<int:sno>' ,  methods = ['GET', 'POST'])\ndef update(sno):\n    if request.method == \"POST\" :\n        title = request.form['title']\n        desc = request.form['desc']",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def update(sno):\n    if request.method == \"POST\" :\n        title = request.form['title']\n        desc = request.form['desc']\n        todo = Todo.query.filter_by(sno= sno).first()\n        todo.title = title\n        todo.desc = desc\n        db.session.add(todo)\n        db.session.commit()\n        return redirect(url_for('home'))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n# Database URI - SQLite (file will be created in current directory)\napp.config['SQLALCHEMY_DATABASE_URI'] = \"sqlite:///todo.db\"\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Suppress deprecation warning\n# Initialize database\ndb = SQLAlchemy(app)\n# Todo Model\nclass Todo(db.Model):\n    sno = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = \"sqlite:///todo.db\"\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Suppress deprecation warning\n# Initialize database\ndb = SQLAlchemy(app)\n# Todo Model\nclass Todo(db.Model):\n    sno = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    desc = db.Column(db.String(500), nullable=False)\n    date_created = db.Column(db.DateTime(timezone=True),default=lambda: datetime.now(timezone.utc))",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False  # Suppress deprecation warning\n# Initialize database\ndb = SQLAlchemy(app)\n# Todo Model\nclass Todo(db.Model):\n    sno = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    desc = db.Column(db.String(500), nullable=False)\n    date_created = db.Column(db.DateTime(timezone=True),default=lambda: datetime.now(timezone.utc))\n    def __repr__(self) -> str:",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = SQLAlchemy(app)\n# Todo Model\nclass Todo(db.Model):\n    sno = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(200), nullable=False)\n    desc = db.Column(db.String(500), nullable=False)\n    date_created = db.Column(db.DateTime(timezone=True),default=lambda: datetime.now(timezone.utc))\n    def __repr__(self) -> str:\n        return f\"{self.sno} - {self.title}\"\n# Ensure DB is created",
        "detail": "app",
        "documentation": {}
    }
]