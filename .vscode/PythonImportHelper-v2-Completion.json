[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "mymod1",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mymod1",
        "description": "mymod1",
        "detail": "mymod1",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "googletrans",
        "description": "googletrans",
        "isExtraImport": true,
        "detail": "googletrans",
        "documentation": {}
    },
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "ActionChains",
        "importPath": "selenium.webdriver.common.action_chains",
        "description": "selenium.webdriver.common.action_chains",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.action_chains",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "selenium.webdriver.support.select",
        "description": "selenium.webdriver.support.select",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.select",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "selenium.webdriver.support.select",
        "description": "selenium.webdriver.support.select",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.select",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "selenium.webdriver.support.select",
        "description": "selenium.webdriver.support.select",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.select",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "selenium.webdriver.support.select",
        "description": "selenium.webdriver.support.select",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.select",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "selenium.webdriver.support.select",
        "description": "selenium.webdriver.support.select",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.select",
        "documentation": {}
    },
    {
        "label": "Select",
        "importPath": "selenium.webdriver.support.select",
        "description": "selenium.webdriver.support.select",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.select",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotVisibleException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "ElementNotSelectableException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "NoSuchElementException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.wait       ",
        "description": "selenium.webdriver.support.wait       ",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.wait       ",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.wait       ",
        "description": "selenium.webdriver.support.wait       ",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.wait       ",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.wait       ",
        "description": "selenium.webdriver.support.wait       ",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.wait       ",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.wait       ",
        "description": "selenium.webdriver.support.wait       ",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.wait       ",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.wait",
        "description": "selenium.webdriver.support.wait",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.wait",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.wait",
        "description": "selenium.webdriver.support.wait",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.wait",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "openpyxl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openpyxl",
        "description": "openpyxl",
        "detail": "openpyxl",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by ",
        "description": "selenium.webdriver.common.by ",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by ",
        "documentation": {}
    },
    {
        "label": "PatternFill",
        "importPath": "openpyxl.styles",
        "description": "openpyxl.styles",
        "isExtraImport": true,
        "detail": "openpyxl.styles",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "cowsay",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cowsay",
        "description": "cowsay",
        "detail": "cowsay",
        "documentation": {}
    },
    {
        "label": "hello_world",
        "kind": 2,
        "importPath": "Flask.helloworld",
        "description": "Flask.helloworld",
        "peekOfCode": "def hello_world():\n    return render_template('index.html')\n    # return 'hello world'\ndef gfg():\n    return \"gfgforgfg\"\napp.add_url_rule('/','g2g',gfg)\nif __name__ == '__main__':\n    app.run(debug= True)",
        "detail": "Flask.helloworld",
        "documentation": {}
    },
    {
        "label": "gfg",
        "kind": 2,
        "importPath": "Flask.helloworld",
        "description": "Flask.helloworld",
        "peekOfCode": "def gfg():\n    return \"gfgforgfg\"\napp.add_url_rule('/','g2g',gfg)\nif __name__ == '__main__':\n    app.run(debug= True)",
        "detail": "Flask.helloworld",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask.helloworld",
        "description": "Flask.helloworld",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef hello_world():\n    return render_template('index.html')\n    # return 'hello world'\ndef gfg():\n    return \"gfgforgfg\"\napp.add_url_rule('/','g2g',gfg)\nif __name__ == '__main__':\n    app.run(debug= True)",
        "detail": "Flask.helloworld",
        "documentation": {}
    },
    {
        "label": "InstanceCounter",
        "kind": 6,
        "importPath": "PY.5instancecounter",
        "description": "PY.5instancecounter",
        "peekOfCode": "class InstanceCounter:\n    \"\"\"\n    A class that keeps track of the number of instances created.\n    \"\"\"\n    # Class variable to store the count of instances\n    _instance_count = 0\n    def __init__(self, name=\"\"):\n        \"\"\"\n        Constructor for InstanceCounter.\n        Increments the instance count each time a new object is created.",
        "detail": "PY.5instancecounter",
        "documentation": {}
    },
    {
        "label": "instance1",
        "kind": 5,
        "importPath": "PY.5instancecounter",
        "description": "PY.5instancecounter",
        "peekOfCode": "instance1 = InstanceCounter(\"First\")\ninstance2 = InstanceCounter(\"Second\")\ninstance3 = InstanceCounter(\"Third\")\n# Get the total count using the class method\ncurrent_count = InstanceCounter.get_instance_count()\nprint(f\"\\nTotal instances created so far: {current_count}\")\n# Create more instances\ninstance4 = InstanceCounter(\"Fourth\")\ninstance5 = InstanceCounter(\"Fifth\")\n# Get the updated count",
        "detail": "PY.5instancecounter",
        "documentation": {}
    },
    {
        "label": "instance2",
        "kind": 5,
        "importPath": "PY.5instancecounter",
        "description": "PY.5instancecounter",
        "peekOfCode": "instance2 = InstanceCounter(\"Second\")\ninstance3 = InstanceCounter(\"Third\")\n# Get the total count using the class method\ncurrent_count = InstanceCounter.get_instance_count()\nprint(f\"\\nTotal instances created so far: {current_count}\")\n# Create more instances\ninstance4 = InstanceCounter(\"Fourth\")\ninstance5 = InstanceCounter(\"Fifth\")\n# Get the updated count\nupdated_count = InstanceCounter.get_instance_count()",
        "detail": "PY.5instancecounter",
        "documentation": {}
    },
    {
        "label": "instance3",
        "kind": 5,
        "importPath": "PY.5instancecounter",
        "description": "PY.5instancecounter",
        "peekOfCode": "instance3 = InstanceCounter(\"Third\")\n# Get the total count using the class method\ncurrent_count = InstanceCounter.get_instance_count()\nprint(f\"\\nTotal instances created so far: {current_count}\")\n# Create more instances\ninstance4 = InstanceCounter(\"Fourth\")\ninstance5 = InstanceCounter(\"Fifth\")\n# Get the updated count\nupdated_count = InstanceCounter.get_instance_count()\nprint(f\"\\nTotal instances created after more additions: {updated_count}\")",
        "detail": "PY.5instancecounter",
        "documentation": {}
    },
    {
        "label": "current_count",
        "kind": 5,
        "importPath": "PY.5instancecounter",
        "description": "PY.5instancecounter",
        "peekOfCode": "current_count = InstanceCounter.get_instance_count()\nprint(f\"\\nTotal instances created so far: {current_count}\")\n# Create more instances\ninstance4 = InstanceCounter(\"Fourth\")\ninstance5 = InstanceCounter(\"Fifth\")\n# Get the updated count\nupdated_count = InstanceCounter.get_instance_count()\nprint(f\"\\nTotal instances created after more additions: {updated_count}\")\n# You can also access the class variable directly, though a method is often preferred for encapsulation\nprint(f\"Directly accessing class variable: {InstanceCounter._instance_count}\")",
        "detail": "PY.5instancecounter",
        "documentation": {}
    },
    {
        "label": "instance4",
        "kind": 5,
        "importPath": "PY.5instancecounter",
        "description": "PY.5instancecounter",
        "peekOfCode": "instance4 = InstanceCounter(\"Fourth\")\ninstance5 = InstanceCounter(\"Fifth\")\n# Get the updated count\nupdated_count = InstanceCounter.get_instance_count()\nprint(f\"\\nTotal instances created after more additions: {updated_count}\")\n# You can also access the class variable directly, though a method is often preferred for encapsulation\nprint(f\"Directly accessing class variable: {InstanceCounter._instance_count}\")",
        "detail": "PY.5instancecounter",
        "documentation": {}
    },
    {
        "label": "instance5",
        "kind": 5,
        "importPath": "PY.5instancecounter",
        "description": "PY.5instancecounter",
        "peekOfCode": "instance5 = InstanceCounter(\"Fifth\")\n# Get the updated count\nupdated_count = InstanceCounter.get_instance_count()\nprint(f\"\\nTotal instances created after more additions: {updated_count}\")\n# You can also access the class variable directly, though a method is often preferred for encapsulation\nprint(f\"Directly accessing class variable: {InstanceCounter._instance_count}\")",
        "detail": "PY.5instancecounter",
        "documentation": {}
    },
    {
        "label": "updated_count",
        "kind": 5,
        "importPath": "PY.5instancecounter",
        "description": "PY.5instancecounter",
        "peekOfCode": "updated_count = InstanceCounter.get_instance_count()\nprint(f\"\\nTotal instances created after more additions: {updated_count}\")\n# You can also access the class variable directly, though a method is often preferred for encapsulation\nprint(f\"Directly accessing class variable: {InstanceCounter._instance_count}\")",
        "detail": "PY.5instancecounter",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 6,
        "importPath": "PY.calculator",
        "description": "PY.calculator",
        "peekOfCode": "class person():\n    x= 5\n    def __init__(self,x):\n        self.x = x\nabc = person()\nprint(abc())\nclass son:\n    global x\n    x= 5\n    def __init__(self,x):",
        "detail": "PY.calculator",
        "documentation": {}
    },
    {
        "label": "son",
        "kind": 6,
        "importPath": "PY.calculator",
        "description": "PY.calculator",
        "peekOfCode": "class son:\n    global x\n    x= 5\n    def __init__(self,x):\n        self.x = x\n        return x",
        "detail": "PY.calculator",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 5,
        "importPath": "PY.calculator",
        "description": "PY.calculator",
        "peekOfCode": "abc = person()\nprint(abc())\nclass son:\n    global x\n    x= 5\n    def __init__(self,x):\n        self.x = x\n        return x",
        "detail": "PY.calculator",
        "documentation": {}
    },
    {
        "label": "myclass",
        "kind": 6,
        "importPath": "PY.classobjinpy",
        "description": "PY.classobjinpy",
        "peekOfCode": "class myclass():\n    x=5\nalp = myclass()\nclass aero:\n    y=6\nprint(f'{aero} is aero class')\n# alp2 = myclass()\n# alp1 = myclass()\n# alp0 = myclass()\nprint(myclass())",
        "detail": "PY.classobjinpy",
        "documentation": {}
    },
    {
        "label": "aero",
        "kind": 6,
        "importPath": "PY.classobjinpy",
        "description": "PY.classobjinpy",
        "peekOfCode": "class aero:\n    y=6\nprint(f'{aero} is aero class')\n# alp2 = myclass()\n# alp1 = myclass()\n# alp0 = myclass()\nprint(myclass())\nprint(alp.x)\nclass person:\n    def __init__(self,name,age):",
        "detail": "PY.classobjinpy",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 6,
        "importPath": "PY.classobjinpy",
        "description": "PY.classobjinpy",
        "peekOfCode": "class person:\n    def __init__(self,name,age):\n        self.name= name\n        self.age = age\n    def __str__(self):\n        return f\"{self.name} ({self.age})\"\n    # return name \np1 = person('jonny',39)\nprint(p1)\nprint(p1.age,p1.name,)",
        "detail": "PY.classobjinpy",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "PY.classobjinpy",
        "description": "PY.classobjinpy",
        "peekOfCode": "class Person:\n    def __init__(mysillyobject, name, age):\n        mysillyobject.name = name\n        mysillyobject.age = age\n    def myfunc(abc):\n        print(\"Hello my name is \" + abc.name)\np1 = Person(\"Johncena\", 36)\np1.myfunc()",
        "detail": "PY.classobjinpy",
        "documentation": {}
    },
    {
        "label": "alp",
        "kind": 5,
        "importPath": "PY.classobjinpy",
        "description": "PY.classobjinpy",
        "peekOfCode": "alp = myclass()\nclass aero:\n    y=6\nprint(f'{aero} is aero class')\n# alp2 = myclass()\n# alp1 = myclass()\n# alp0 = myclass()\nprint(myclass())\nprint(alp.x)\nclass person:",
        "detail": "PY.classobjinpy",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "PY.classobjinpy",
        "description": "PY.classobjinpy",
        "peekOfCode": "p1 = person('jonny',39)\nprint(p1)\nprint(p1.age,p1.name,)\n#use or other name in place of self\nclass Person:\n    def __init__(mysillyobject, name, age):\n        mysillyobject.name = name\n        mysillyobject.age = age\n    def myfunc(abc):\n        print(\"Hello my name is \" + abc.name)",
        "detail": "PY.classobjinpy",
        "documentation": {}
    },
    {
        "label": "p1",
        "kind": 5,
        "importPath": "PY.classobjinpy",
        "description": "PY.classobjinpy",
        "peekOfCode": "p1 = Person(\"Johncena\", 36)\np1.myfunc()",
        "detail": "PY.classobjinpy",
        "documentation": {}
    },
    {
        "label": "decorator",
        "kind": 2,
        "importPath": "PY.decorum_eg",
        "description": "PY.decorum_eg",
        "peekOfCode": "def decorator(func):\n    def wrapper():\n        print(\"Before calling the function.\")\n        func()\n        print(\"After calling the function.\")\n    return wrapper\n# Applying the decorator to a function\n@decorator\ndef greet():\n    print(\"Hello, World!\")",
        "detail": "PY.decorum_eg",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "PY.decorum_eg",
        "description": "PY.decorum_eg",
        "peekOfCode": "def greet():\n    print(\"Hello, World!\")\ngreet()",
        "detail": "PY.decorum_eg",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "PY.flasktest",
        "description": "PY.flasktest",
        "peekOfCode": "options = webdriver.ChromeOptions()\ndriver = webdriver.Chrome(options=options)\nwait = WebDriverWait(driver, WAIT_TIMEOUT)",
        "detail": "PY.flasktest",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "PY.flasktest",
        "description": "PY.flasktest",
        "peekOfCode": "driver = webdriver.Chrome(options=options)\nwait = WebDriverWait(driver, WAIT_TIMEOUT)",
        "detail": "PY.flasktest",
        "documentation": {}
    },
    {
        "label": "wait",
        "kind": 5,
        "importPath": "PY.flasktest",
        "description": "PY.flasktest",
        "peekOfCode": "wait = WebDriverWait(driver, WAIT_TIMEOUT)",
        "detail": "PY.flasktest",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "PY.from flask import Flask",
        "description": "PY.from flask import Flask",
        "peekOfCode": "def home():\n    return \"Hello, Flask! voillla first web server deployment\"\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "PY.from flask import Flask",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "PY.from flask import Flask",
        "description": "PY.from flask import Flask",
        "peekOfCode": "app = Flask(__name__)  # Create Flask app\n@app.route(\"/\")  # Home route\ndef home():\n    return \"Hello, Flask! voillla first web server deployment\"\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "PY.from flask import Flask",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "PY.globalvar",
        "description": "PY.globalvar",
        "peekOfCode": "def outer():\n    x =\"outer local\"\n    def inner():\n        nonlocal x\n        x = \"inner modified outer\"\n        print(\"inner+\",x)\n    inner()\n    print('1outer+', x)\nouter()\nprint('Global+', x)",
        "detail": "PY.globalvar",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.globalvar",
        "description": "PY.globalvar",
        "peekOfCode": "x = \"global\"\ndef outer():\n    x =\"outer local\"\n    def inner():\n        nonlocal x\n        x = \"inner modified outer\"\n        print(\"inner+\",x)\n    inner()\n    print('1outer+', x)\nouter()",
        "detail": "PY.globalvar",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "PY.globalvar",
        "description": "PY.globalvar",
        "peekOfCode": "d1 = {\n    \"ram\": 34\n}\njason_str = json.dumps(d1)\nb = json.loads(jason_str)\nprint(b[\"ram\"])",
        "detail": "PY.globalvar",
        "documentation": {}
    },
    {
        "label": "jason_str",
        "kind": 5,
        "importPath": "PY.globalvar",
        "description": "PY.globalvar",
        "peekOfCode": "jason_str = json.dumps(d1)\nb = json.loads(jason_str)\nprint(b[\"ram\"])",
        "detail": "PY.globalvar",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "PY.globalvar",
        "description": "PY.globalvar",
        "peekOfCode": "b = json.loads(jason_str)\nprint(b[\"ram\"])",
        "detail": "PY.globalvar",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "def myfunc():\n    print(\"Python \" + x)\nmyfunc()\n#output of function\nx = \"awesome\"\ndef myfunc1() :\n    print(\"ok\")\nmyfunc1()\n#local and global variable in a function \nx = \"awesome\"",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "myfunc1",
        "kind": 2,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "def myfunc1() :\n    print(\"ok\")\nmyfunc1()\n#local and global variable in a function \nx = \"awesome\"\ndef myfunc2():\n    x = \"fantastic2\"\n    print(\"Python is \" + x)\nmyfunc2() #return with fantastic2\nprint(\"Python is \" + x) #returns with awsome",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "myfunc2",
        "kind": 2,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "def myfunc2():\n    x = \"fantastic2\"\n    print(\"Python is \" + x)\nmyfunc2() #return with fantastic2\nprint(\"Python is \" + x) #returns with awsome\n#defining global function\n#both prints will use x= one\ndef myfunc3():\n    global x\n    x = \"one\"",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "myfunc3",
        "kind": 2,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "def myfunc3():\n    global x\n    x = \"one\"\n    print (\"python is \", x)\nmyfunc3()\nprint (\"python is \", x)\n#frozen set\ny = frozenset({\"apple\", \"banana\", \"cherry\"})\nprint(y)\ny = frozenset([\"apple\", \"banana\", \"cherry\"])",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "x = y = z = \"Orange\"\nprint(x)\nprint(y)\nprint(z)\n# printing variabeles with \nx = \"Python\"\ny = \"is\"\nz = \"awesome\"\nprint(x, y, z)\n#addition of string ",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "x = \"Python\"\ny = \"is\"\nz = \"awesome\"\nprint(x, y, z)\n#addition of string \nx = \"Python \"\ny = \"is \"\nz = \"awesome\"\nprint(x + y + z)\n#function ",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "y = \"is\"\nz = \"awesome\"\nprint(x, y, z)\n#addition of string \nx = \"Python \"\ny = \"is \"\nz = \"awesome\"\nprint(x + y + z)\n#function \n#define function and using variable outside the function ",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "z = \"awesome\"\nprint(x, y, z)\n#addition of string \nx = \"Python \"\ny = \"is \"\nz = \"awesome\"\nprint(x + y + z)\n#function \n#define function and using variable outside the function \nx = \"awesome\"",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "x = \"Python \"\ny = \"is \"\nz = \"awesome\"\nprint(x + y + z)\n#function \n#define function and using variable outside the function \nx = \"awesome\"\ndef myfunc():\n    print(\"Python \" + x)\nmyfunc()",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "y = \"is \"\nz = \"awesome\"\nprint(x + y + z)\n#function \n#define function and using variable outside the function \nx = \"awesome\"\ndef myfunc():\n    print(\"Python \" + x)\nmyfunc()\n#output of function",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "z = \"awesome\"\nprint(x + y + z)\n#function \n#define function and using variable outside the function \nx = \"awesome\"\ndef myfunc():\n    print(\"Python \" + x)\nmyfunc()\n#output of function\nx = \"awesome\"",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "x = \"awesome\"\ndef myfunc():\n    print(\"Python \" + x)\nmyfunc()\n#output of function\nx = \"awesome\"\ndef myfunc1() :\n    print(\"ok\")\nmyfunc1()\n#local and global variable in a function ",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "x = \"awesome\"\ndef myfunc1() :\n    print(\"ok\")\nmyfunc1()\n#local and global variable in a function \nx = \"awesome\"\ndef myfunc2():\n    x = \"fantastic2\"\n    print(\"Python is \" + x)\nmyfunc2() #return with fantastic2",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "x = \"awesome\"\ndef myfunc2():\n    x = \"fantastic2\"\n    print(\"Python is \" + x)\nmyfunc2() #return with fantastic2\nprint(\"Python is \" + x) #returns with awsome\n#defining global function\n#both prints will use x= one\ndef myfunc3():\n    global x",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "y = frozenset({\"apple\", \"banana\", \"cherry\"})\nprint(y)\ny = frozenset([\"apple\", \"banana\", \"cherry\"])\nprint(y)\n#bytes\nx= b\"abc\"\nprint(x)\nprint(type(x))",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "PY.hello",
        "description": "PY.hello",
        "peekOfCode": "y = frozenset([\"apple\", \"banana\", \"cherry\"])\nprint(y)\n#bytes\nx= b\"abc\"\nprint(x)\nprint(type(x))",
        "detail": "PY.hello",
        "documentation": {}
    },
    {
        "label": "check_left",
        "kind": 2,
        "importPath": "PY.ifelsematch",
        "description": "PY.ifelsematch",
        "peekOfCode": "def check_left():\n    print(\"Left checked\")\n    return True\ndef check_right():\n    print(\"Right checked\")\n    return False\nif check_left() or check_right():\n    print(\"Done\")\nelif check_left() & check_right():\n    print(\"Done1\")",
        "detail": "PY.ifelsematch",
        "documentation": {}
    },
    {
        "label": "check_right",
        "kind": 2,
        "importPath": "PY.ifelsematch",
        "description": "PY.ifelsematch",
        "peekOfCode": "def check_right():\n    print(\"Right checked\")\n    return False\nif check_left() or check_right():\n    print(\"Done\")\nelif check_left() & check_right():\n    print(\"Done1\")\nelif check_left() | check_right():\n    print(\"Done2\")\n#guarded match cases",
        "detail": "PY.ifelsematch",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "PY.ifelsematch",
        "description": "PY.ifelsematch",
        "peekOfCode": "a = 200\nb = 33\nc = 500\nif a > b or a > c :\n    print(\"At least one of the conditions is True\")\nif (a > b) | (a  > c) :\n    print(\"bit wise or At least one of the conditions is True\")\ndef check_left():\n    print(\"Left checked\")\n    return True",
        "detail": "PY.ifelsematch",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "PY.ifelsematch",
        "description": "PY.ifelsematch",
        "peekOfCode": "b = 33\nc = 500\nif a > b or a > c :\n    print(\"At least one of the conditions is True\")\nif (a > b) | (a  > c) :\n    print(\"bit wise or At least one of the conditions is True\")\ndef check_left():\n    print(\"Left checked\")\n    return True\ndef check_right():",
        "detail": "PY.ifelsematch",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "PY.ifelsematch",
        "description": "PY.ifelsematch",
        "peekOfCode": "c = 500\nif a > b or a > c :\n    print(\"At least one of the conditions is True\")\nif (a > b) | (a  > c) :\n    print(\"bit wise or At least one of the conditions is True\")\ndef check_left():\n    print(\"Left checked\")\n    return True\ndef check_right():\n    print(\"Right checked\")",
        "detail": "PY.ifelsematch",
        "documentation": {}
    },
    {
        "label": "boo",
        "kind": 6,
        "importPath": "PY.inhetancepracticequestion",
        "description": "PY.inhetancepracticequestion",
        "peekOfCode": "class book :\n    def __init__(self, title,author, pages):\n        self.title = title\n        self.author = author\n        self.pages = pages\n    def getdetail(self,):\n        return f\"book name is {self.title} -{self.author} with {self.pages} pages\"\nb1 = book(\"shadow slave\",\"guilty3\", 2427)\nb2 = book(\"reverened insanity\", \"gu master\", 2334)\nprint(b1.getdetail())",
        "detail": "PY.inhetancepracticequestion",
        "documentation": {}
    },
    {
        "label": "vehicle",
        "kind": 6,
        "importPath": "PY.inhetancepracticequestion",
        "description": "PY.inhetancepracticequestion",
        "peekOfCode": "class vehicle:\n    def __init__(self,brand, year):\n        self.brand = brand\n        self.year = year\n    def get_info(self):\n        return f\"bran of vehicle is {self.brand} and year of manf.. {self.year}\"\nclass car(vehicle):\n    def __init__(self,brand , year, model):\n        super().__init__(brand , year)\n        self.model  = model",
        "detail": "PY.inhetancepracticequestion",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 6,
        "importPath": "PY.inhetancepracticequestion",
        "description": "PY.inhetancepracticequestion",
        "peekOfCode": "class car(vehicle):\n    def __init__(self,brand , year, model):\n        super().__init__(brand , year)\n        self.model  = model\n    def get_info(self):\n        return f\"bran of vehicle is {self.brand} and year of manf.. {self.year} having model {self.model}\"\ncar1 = car(\"maruti\", 2024, \"swift\")\nprint(car1.get_info())",
        "detail": "PY.inhetancepracticequestion",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "PY.inhetancepracticequestion",
        "description": "PY.inhetancepracticequestion",
        "peekOfCode": "b1 = book(\"shadow slave\",\"guilty3\", 2427)\nb2 = book(\"reverened insanity\", \"gu master\", 2334)\nprint(b1.getdetail())\nprint(b2.getdetail())\n\"\"\"\nCreate a class Student with attributes: name, roll_number, and grade.\nUse the __init__ method to initialize these attributes.\nWrite a method display() to print them in a readable format.\nCreate one object and call the display method.\n\"\"\"",
        "detail": "PY.inhetancepracticequestion",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "PY.inhetancepracticequestion",
        "description": "PY.inhetancepracticequestion",
        "peekOfCode": "b2 = book(\"reverened insanity\", \"gu master\", 2334)\nprint(b1.getdetail())\nprint(b2.getdetail())\n\"\"\"\nCreate a class Student with attributes: name, roll_number, and grade.\nUse the __init__ method to initialize these attributes.\nWrite a method display() to print them in a readable format.\nCreate one object and call the display method.\n\"\"\"\n'''",
        "detail": "PY.inhetancepracticequestion",
        "documentation": {}
    },
    {
        "label": "car1",
        "kind": 5,
        "importPath": "PY.inhetancepracticequestion",
        "description": "PY.inhetancepracticequestion",
        "peekOfCode": "car1 = car(\"maruti\", 2024, \"swift\")\nprint(car1.get_info())",
        "detail": "PY.inhetancepracticequestion",
        "documentation": {}
    },
    {
        "label": "CountUpTo",
        "kind": 6,
        "importPath": "PY.iteratior",
        "description": "PY.iteratior",
        "peekOfCode": "class CountUpTo:\n    def __init__(self, limit):\n        self.limit = limit\n        self.current = 1\n    def __iter__(self):\n        return self  # this class is its own iterator\n    def __next__(self):\n        if self.current > self.limit:\n            raise StopIteration\n        else:",
        "detail": "PY.iteratior",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "PY.iteratior",
        "description": "PY.iteratior",
        "peekOfCode": "counter = CountUpTo(5)\nfor number in counter:\n    print(number)\nprint(type())",
        "detail": "PY.iteratior",
        "documentation": {}
    },
    {
        "label": "greeting",
        "kind": 2,
        "importPath": "PY.mymod1",
        "description": "PY.mymod1",
        "peekOfCode": "def greeting(name):\n    print(\"ram ram bhai saryane\",name)",
        "detail": "PY.mymod1",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "PY.operatorlisttupple",
        "description": "PY.operatorlisttupple",
        "peekOfCode": "def myfunc(n):\n    return abs(n-50)\nl4=[34,56,78,100,25,47]\nl4.sort(key = myfunc, reverse=True)\nprint(l4)\n#copying a list to new list\nl5=l4.copy()\nprint(l5)\nl6=list(l3)\nprint(l6)",
        "detail": "PY.operatorlisttupple",
        "documentation": {}
    },
    {
        "label": "#",
        "kind": 5,
        "importPath": "PY.operatorlisttupple",
        "description": "PY.operatorlisttupple",
        "peekOfCode": "# = - * / add sub mul divide\n# % modulus(remainder is returned)\n# ** exponential a**b a to the power b\n# // floor division removes decimal part after division/ quotient\n# a+=1 --> a=a+1, simarly a-=1,a*=4,a/=3,a%=2,a**=3\n'''\n&=\tx &= 3\tx = x & 3\t\n|=\tx |= 3\tx = x | 3\t\n^=\tx ^= 3\tx = x ^ 3\t\n>>=\tx >>= 3\tx = x >> 3\t",
        "detail": "PY.operatorlisttupple",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 5,
        "importPath": "PY.operatorlisttupple",
        "description": "PY.operatorlisttupple",
        "peekOfCode": "fruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nl3=[]\nfor i in fruits:\n    if \"a\" in i:\n        l3.append(i)\nprint(l3)\n#with list comprension\nl3 =[i for i in fruits if i!=\"apple\" ]\nprint(l3)\nnewlist = [x if x != \"banana\" else \"orange\" for x in fruits]",
        "detail": "PY.operatorlisttupple",
        "documentation": {}
    },
    {
        "label": "newlist",
        "kind": 5,
        "importPath": "PY.operatorlisttupple",
        "description": "PY.operatorlisttupple",
        "peekOfCode": "newlist = [x if x != \"banana\" else \"orange\" for x in fruits]\n# sorting with key = a funcion\ndef myfunc(n):\n    return abs(n-50)\nl4=[34,56,78,100,25,47]\nl4.sort(key = myfunc, reverse=True)\nprint(l4)\n#copying a list to new list\nl5=l4.copy()\nprint(l5)",
        "detail": "PY.operatorlisttupple",
        "documentation": {}
    },
    {
        "label": "l4.sort(key",
        "kind": 5,
        "importPath": "PY.operatorlisttupple",
        "description": "PY.operatorlisttupple",
        "peekOfCode": "l4.sort(key = myfunc, reverse=True)\nprint(l4)\n#copying a list to new list\nl5=l4.copy()\nprint(l5)\nl6=list(l3)\nprint(l6)\nmylist=l6[:]\nprint(mylist)\n#joining 2 list",
        "detail": "PY.operatorlisttupple",
        "documentation": {}
    },
    {
        "label": "full_pyramid",
        "kind": 2,
        "importPath": "PY.patern",
        "description": "PY.patern",
        "peekOfCode": "def full_pyramid(n):\n    for i in range(n,0,-1):\n        # Print leading spaces\n        for j in range(n - i):\n            print(\" \", end=\"\")\n        # Print asterisks for the current row\n        for k in range(1, 2*i):\n            print(\"*\", end=\"\")\n        print()\nfull_pyramid(5)",
        "detail": "PY.patern",
        "documentation": {}
    },
    {
        "label": "print_half_pyramid",
        "kind": 2,
        "importPath": "PY.patern",
        "description": "PY.patern",
        "peekOfCode": "def print_half_pyramid(n):\n    if n > 0:\n        # Call the function recursively with a smaller value of n\n        print_half_pyramid(n - 1)\n        # Print '*' characters for the current row\n        print('*' * n)\n# Get the number of rows from the user\nrows = int(input(\"Enter the number of rows for the half pyramid: \"))\n# Call the function to print the half pyramid pattern\nprint_half_pyramid(rows)",
        "detail": "PY.patern",
        "documentation": {}
    },
    {
        "label": "rows",
        "kind": 5,
        "importPath": "PY.patern",
        "description": "PY.patern",
        "peekOfCode": "rows = int(input(\"Enter the number of rows for the half pyramid: \"))\n# Call the function to print the half pyramid pattern\nprint_half_pyramid(rows)\nprint('z')",
        "detail": "PY.patern",
        "documentation": {}
    },
    {
        "label": "my_function",
        "kind": 2,
        "importPath": "PY.pythonfunc",
        "description": "PY.pythonfunc",
        "peekOfCode": "def my_function(**kid):\n    print(kid)\n    for i,j in enumerate(kid):\n\t    # print(i) \n        print(j)\n    # print(\"His last name is \" + kid[\"lname\"])\nmy_function(fname = \"Tobias\", lname = \"Refsnes\")\ndef myfunc(n):\n  return lambda a : a * n\nmydoubler = myfunc(2)",
        "detail": "PY.pythonfunc",
        "documentation": {}
    },
    {
        "label": "myfunc",
        "kind": 2,
        "importPath": "PY.pythonfunc",
        "description": "PY.pythonfunc",
        "peekOfCode": "def myfunc(n):\n  return lambda a : a * n\nmydoubler = myfunc(2)\nmytripler = myfunc(3)\nprint(mydoubler(11))\nprint(mytripler(11))",
        "detail": "PY.pythonfunc",
        "documentation": {}
    },
    {
        "label": "my_function(fname",
        "kind": 5,
        "importPath": "PY.pythonfunc",
        "description": "PY.pythonfunc",
        "peekOfCode": "my_function(fname = \"Tobias\", lname = \"Refsnes\")\ndef myfunc(n):\n  return lambda a : a * n\nmydoubler = myfunc(2)\nmytripler = myfunc(3)\nprint(mydoubler(11))\nprint(mytripler(11))",
        "detail": "PY.pythonfunc",
        "documentation": {}
    },
    {
        "label": "mydoubler",
        "kind": 5,
        "importPath": "PY.pythonfunc",
        "description": "PY.pythonfunc",
        "peekOfCode": "mydoubler = myfunc(2)\nmytripler = myfunc(3)\nprint(mydoubler(11))\nprint(mytripler(11))",
        "detail": "PY.pythonfunc",
        "documentation": {}
    },
    {
        "label": "mytripler",
        "kind": 5,
        "importPath": "PY.pythonfunc",
        "description": "PY.pythonfunc",
        "peekOfCode": "mytripler = myfunc(3)\nprint(mydoubler(11))\nprint(mytripler(11))",
        "detail": "PY.pythonfunc",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "x = 1                       #int\ny = 35656222554887711.123   #float\nz = -3255522j               #complex number\nprint(type(x))\nprint(type(y))\nprint(type(z))\n#float\nx = 1.10\ny = 1.0\nz = -35.59",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "y = 35656222554887711.123   #float\nz = -3255522j               #complex number\nprint(type(x))\nprint(type(y))\nprint(type(z))\n#float\nx = 1.10\ny = 1.0\nz = -35.59\nprint(type(x))",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "z = -3255522j               #complex number\nprint(type(x))\nprint(type(y))\nprint(type(z))\n#float\nx = 1.10\ny = 1.0\nz = -35.59\nprint(type(x))\nprint(type(y))",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "x = 1.10\ny = 1.0\nz = -35.59\nprint(type(x))\nprint(type(y))\nprint(type(z))\n#float using e(all with power e4=10^4 are in float data type)\nx = 35e3\ny = 12E4\nz = -87.7e100",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "y = 1.0\nz = -35.59\nprint(type(x))\nprint(type(y))\nprint(type(z))\n#float using e(all with power e4=10^4 are in float data type)\nx = 35e3\ny = 12E4\nz = -87.7e100\nprint (x,y,z)",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "z = -35.59\nprint(type(x))\nprint(type(y))\nprint(type(z))\n#float using e(all with power e4=10^4 are in float data type)\nx = 35e3\ny = 12E4\nz = -87.7e100\nprint (x,y,z)\nprint(type(x))",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "x = 35e3\ny = 12E4\nz = -87.7e100\nprint (x,y,z)\nprint(type(x))\nprint(type(y))\nprint(type(z))\n#convert int to float and complex and float to int\nx = 1                       #int\ny = 711.123   #float",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "y = 12E4\nz = -87.7e100\nprint (x,y,z)\nprint(type(x))\nprint(type(y))\nprint(type(z))\n#convert int to float and complex and float to int\nx = 1                       #int\ny = 711.123   #float\nz = -3255522j               #complex number",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "z = -87.7e100\nprint (x,y,z)\nprint(type(x))\nprint(type(y))\nprint(type(z))\n#convert int to float and complex and float to int\nx = 1                       #int\ny = 711.123   #float\nz = -3255522j               #complex number\na=float(x)",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "x = 1                       #int\ny = 711.123   #float\nz = -3255522j               #complex number\na=float(x)\nb=int(y)\nc=complex(x)\nprint (a,b,c)\nprint(type(x))\nprint(type(y))\nprint(type(z))",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "y = 711.123   #float\nz = -3255522j               #complex number\na=float(x)\nb=int(y)\nc=complex(x)\nprint (a,b,c)\nprint(type(x))\nprint(type(y))\nprint(type(z))\nprint(random.randrange(10,100))",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "PY.pythonnum",
        "description": "PY.pythonnum",
        "peekOfCode": "z = -3255522j               #complex number\na=float(x)\nb=int(y)\nc=complex(x)\nprint (a,b,c)\nprint(type(x))\nprint(type(y))\nprint(type(z))\nprint(random.randrange(10,100))\ns=int(\"11214\")",
        "detail": "PY.pythonnum",
        "documentation": {}
    },
    {
        "label": "myclass",
        "kind": 6,
        "importPath": "PY.pythonstring",
        "description": "PY.pythonstring",
        "peekOfCode": "class myclass():\n    def __len__(self):\n        return 0\nmyobj = myclass()\nprint(bool(myobj))\n#use function as bool\ndef myFunction() :\n    return True\nprint(myFunction())\n# check if object is int or not",
        "detail": "PY.pythonstring",
        "documentation": {}
    },
    {
        "label": "myFunction",
        "kind": 2,
        "importPath": "PY.pythonstring",
        "description": "PY.pythonstring",
        "peekOfCode": "def myFunction() :\n    return True\nprint(myFunction())\n# check if object is int or not\nx = 200\nprint(isinstance(x, int))\nx = 'rohan'\nprint(isinstance(x, str)) #simmilar implementation for other data types",
        "detail": "PY.pythonstring",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "PY.pythonstring",
        "description": "PY.pythonstring",
        "peekOfCode": "txt = \"ram is a good boy\"\nif \"ram\" in txt :\n    print( '   ram is present in string   ')\n#slicing string\nprint ( txt[:5])\nprint ( txt[7:])\n#reverse index use\nprint ( txt[-2:])\n#printing reverse string\nprint ( txt[::-1])",
        "detail": "PY.pythonstring",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "PY.pythonstring",
        "description": "PY.pythonstring",
        "peekOfCode": "a = \"Hello, World!\"\nprint(a.replace(\"H\", \"J\"))\n#splitting at designated character that particular character is ommited from both strings\nprint(a.split(\"o\"))\n## concatenation of string(joining 2 strings)\nc=txt +a\nprint(c)\nc=txt+' ab'+a\nprint(c)\n#formating string",
        "detail": "PY.pythonstring",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "PY.pythonstring",
        "description": "PY.pythonstring",
        "peekOfCode": "te = f'there are 26 letters, age {age}'\nprint(te)\nte = f'there are 26 letters, age {age:.2f}' #display placeholder/number with 2decimal points\nprint(te)\nte = f'there are 26 letters, age {56*65}'\nprint(te)\n#encode a part of string i.e before \\r\ntf = f'there are 26 \\rletters, age {age}'\nprint(tf)\n#find()uses",
        "detail": "PY.pythonstring",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "PY.pythonstring",
        "description": "PY.pythonstring",
        "peekOfCode": "te = f'there are 26 letters, age {age:.2f}' #display placeholder/number with 2decimal points\nprint(te)\nte = f'there are 26 letters, age {56*65}'\nprint(te)\n#encode a part of string i.e before \\r\ntf = f'there are 26 \\rletters, age {age}'\nprint(tf)\n#find()uses\nif te.find('re')!=-1:\n    print('found!.....')",
        "detail": "PY.pythonstring",
        "documentation": {}
    },
    {
        "label": "te",
        "kind": 5,
        "importPath": "PY.pythonstring",
        "description": "PY.pythonstring",
        "peekOfCode": "te = f'there are 26 letters, age {56*65}'\nprint(te)\n#encode a part of string i.e before \\r\ntf = f'there are 26 \\rletters, age {age}'\nprint(tf)\n#find()uses\nif te.find('re')!=-1:\n    print('found!.....')\n#___________________bool_____________\nprint(10 > 9)",
        "detail": "PY.pythonstring",
        "documentation": {}
    },
    {
        "label": "tf",
        "kind": 5,
        "importPath": "PY.pythonstring",
        "description": "PY.pythonstring",
        "peekOfCode": "tf = f'there are 26 \\rletters, age {age}'\nprint(tf)\n#find()uses\nif te.find('re')!=-1:\n    print('found!.....')\n#___________________bool_____________\nprint(10 > 9)\nprint(10 == 9)\nprint(10 < 9)\nprint(bool('hello'))",
        "detail": "PY.pythonstring",
        "documentation": {}
    },
    {
        "label": "myobj",
        "kind": 5,
        "importPath": "PY.pythonstring",
        "description": "PY.pythonstring",
        "peekOfCode": "myobj = myclass()\nprint(bool(myobj))\n#use function as bool\ndef myFunction() :\n    return True\nprint(myFunction())\n# check if object is int or not\nx = 200\nprint(isinstance(x, int))\nx = 'rohan'",
        "detail": "PY.pythonstring",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.pythonstring",
        "description": "PY.pythonstring",
        "peekOfCode": "x = 200\nprint(isinstance(x, int))\nx = 'rohan'\nprint(isinstance(x, str)) #simmilar implementation for other data types",
        "detail": "PY.pythonstring",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.pythonstring",
        "description": "PY.pythonstring",
        "peekOfCode": "x = 'rohan'\nprint(isinstance(x, str)) #simmilar implementation for other data types",
        "detail": "PY.pythonstring",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "t2 = tuple((\"apple\", \"banana\", \"cherry\"))\na1 =[\"abc\", 34, True, 40, \"male\"]\n#t3=a1.join(t1)\nprint()\nprint(t1[1])\n#append in tuple using list\nl1=list(t1)\nl1.append('kiwi')\nl1[1]=365\nl1.insert(3,'ravindra')",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "thisset",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "thisset = {\"abc\", 34, True, 40, \"male\"}\nprint(thisset)\ns1=set((\"apple\", \"banana\", \"cherry\"))\nprint(s1)\nl1=list([[\"abufbe\",],['uwefu','jewnfj']])\nthisset.add('ory')\n#thisset.update(s1)          #iterable can be anything list tuple dict\nprint(l1)\nprint(thisset)\ns1=s1.union(thisset)",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "l2",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "l2 = [[]]\nl2.append(['1ws','1s1','qds'])\nprint(l2)\n#update - s1.update(value/set), union, intersection, difference, symmetric_difference\nt1 =[\"abc\",\"male\"]\nb='asnuiabfbdj'\nc=' '.join(t1)\nprint(c)\n#dictionaries\nthisdict = {",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "thisdict = {\n    \"brand\": \"Ford\",\n    \"model\": \"Mustang\",\n    \"year\": 1964\n}\nprint(thisdict)\nprint(thisdict[\"brand\"])\n#dictionaries\ncar = {\n\"brand\": \"Ford\",",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "car = {\n\"brand\": \"Ford\",\n\"model\": \"Mustang\",\n\"year\": 1964\n}\nx = car.keys()\nprint(x) #before the change\ncar[\"color\"] = \"white\"\nprint(x) #after the change\nthisdict = {",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "x = car.keys()\nprint(x) #before the change\ncar[\"color\"] = \"white\"\nprint(x) #after the change\nthisdict = {\n    \"brand\": \"Ford\",\n    \"model\": \"Mustang\",\n    \"year\": 1964\n}\nthisdict.update({\"color\": \"red\"})",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "car[\"color\"]",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "car[\"color\"] = \"white\"\nprint(x) #after the change\nthisdict = {\n    \"brand\": \"Ford\",\n    \"model\": \"Mustang\",\n    \"year\": 1964\n}\nthisdict.update({\"color\": \"red\"})\n#nested dictionary\nchild1 = {",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "thisdict",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "thisdict = {\n    \"brand\": \"Ford\",\n    \"model\": \"Mustang\",\n    \"year\": 1964\n}\nthisdict.update({\"color\": \"red\"})\n#nested dictionary\nchild1 = {\n    \"name\" : \"Emil\",\n    \"year\" : 2004",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "child1",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "child1 = {\n    \"name\" : \"Emil\",\n    \"year\" : 2004\n    }\nchild2 = {\n    \"name\" : \"Tobias\",\n    \"year\" : 2007\n    }\nchild3 = {\n    \"name\" : \"Linus\",",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "child2",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "child2 = {\n    \"name\" : \"Tobias\",\n    \"year\" : 2007\n    }\nchild3 = {\n    \"name\" : \"Linus\",\n    \"year\" : 2011\n    }\nmyfamily = {\n    \"child1\" : child1,",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "child3",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "child3 = {\n    \"name\" : \"Linus\",\n    \"year\" : 2011\n    }\nmyfamily = {\n    \"child1\" : child1,\n    \"child2\" : child2,\n    \"child3\" : child3\n    }\n#nested for loop to return item and values of dictionary",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "myfamily",
        "kind": 5,
        "importPath": "PY.pythontuple",
        "description": "PY.pythontuple",
        "peekOfCode": "myfamily = {\n    \"child1\" : child1,\n    \"child2\" : child2,\n    \"child3\" : child3\n    }\n#nested for loop to return item and values of dictionary\nfor x,obj in myfamily.items():\n    print(x)\n    for y in obj :\n        print(y,obj[y])",
        "detail": "PY.pythontuple",
        "documentation": {}
    },
    {
        "label": "car",
        "kind": 6,
        "importPath": "PY.q_on_classobj_basic",
        "description": "PY.q_on_classobj_basic",
        "peekOfCode": "class car:\n    pass\na = car()\nprint(a)\n'''\n**Medium:**\n4.  Explain the difference between a class variable and an instance variable with a simple example.\n5.  What is the purpose of the `self` parameter in a class method, and why is it necessary?\n '''\nclass student :",
        "detail": "PY.q_on_classobj_basic",
        "documentation": {}
    },
    {
        "label": "studen",
        "kind": 6,
        "importPath": "PY.q_on_classobj_basic",
        "description": "PY.q_on_classobj_basic",
        "peekOfCode": "class student :\n    def __init__(self, name):\n        self.name = name \n    def greet(self):\n        print(f\"hello my name is {self.name}\")\n        return \"alpha\"\ns1 = student('rahul')\ns1.greet()\nprint(s1.greet(),)\n'''**Tough:**",
        "detail": "PY.q_on_classobj_basic",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "PY.q_on_classobj_basic",
        "description": "PY.q_on_classobj_basic",
        "peekOfCode": "a = car()\nprint(a)\n'''\n**Medium:**\n4.  Explain the difference between a class variable and an instance variable with a simple example.\n5.  What is the purpose of the `self` parameter in a class method, and why is it necessary?\n '''\nclass student :\n    def __init__(self, name):\n        self.name = name ",
        "detail": "PY.q_on_classobj_basic",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "PY.q_on_classobj_basic",
        "description": "PY.q_on_classobj_basic",
        "peekOfCode": "s1 = student('rahul')\ns1.greet()\nprint(s1.greet(),)\n'''**Tough:**\n6.  Discuss the concept of \"monkey-patching\" in Python. How could you add a new method to an existing class at runtime, and what are the potential risks of doing so?\n'''",
        "detail": "PY.q_on_classobj_basic",
        "documentation": {}
    },
    {
        "label": "'''data",
        "kind": 5,
        "importPath": "PY.sortuse_lambda",
        "description": "PY.sortuse_lambda",
        "peekOfCode": "'''data = [(1, 3), (2, 2), (3, 1)]\n# Expected output: [(3, 1), (2, 2), (1, 3)]\n'''\ndata = [(1, 3), (2, 2), (3, 1)]\n# Expected output: [(3, 1), (2, 2), (1, 3)]\nc = sorted(data,key = lambda x:x[1])\ndata.sort(key = lambda x:x[1])\ny = lambda data:data[1]\nprint(y((20,23,30)))\nprint(data)",
        "detail": "PY.sortuse_lambda",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "PY.sortuse_lambda",
        "description": "PY.sortuse_lambda",
        "peekOfCode": "data = [(1, 3), (2, 2), (3, 1)]\n# Expected output: [(3, 1), (2, 2), (1, 3)]\nc = sorted(data,key = lambda x:x[1])\ndata.sort(key = lambda x:x[1])\ny = lambda data:data[1]\nprint(y((20,23,30)))\nprint(data)",
        "detail": "PY.sortuse_lambda",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "PY.sortuse_lambda",
        "description": "PY.sortuse_lambda",
        "peekOfCode": "c = sorted(data,key = lambda x:x[1])\ndata.sort(key = lambda x:x[1])\ny = lambda data:data[1]\nprint(y((20,23,30)))\nprint(data)",
        "detail": "PY.sortuse_lambda",
        "documentation": {}
    },
    {
        "label": "data.sort(key",
        "kind": 5,
        "importPath": "PY.sortuse_lambda",
        "description": "PY.sortuse_lambda",
        "peekOfCode": "data.sort(key = lambda x:x[1])\ny = lambda data:data[1]\nprint(y((20,23,30)))\nprint(data)",
        "detail": "PY.sortuse_lambda",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "PY.sortuse_lambda",
        "description": "PY.sortuse_lambda",
        "peekOfCode": "y = lambda data:data[1]\nprint(y((20,23,30)))\nprint(data)",
        "detail": "PY.sortuse_lambda",
        "documentation": {}
    },
    {
        "label": "df",
        "kind": 5,
        "importPath": "PY.translate",
        "description": "PY.translate",
        "peekOfCode": "df = pd.read_excel(\"Rajasthan_mcv_2025-06-18_rushangi_updated-village_new 1.xlsx\")\n# Initialize Google Translator\ntranslator = Translator()\n# Translate Hindi text in column C (index 2)\ndf['Translated_Village'] = df.iloc[:, 2].astype(str).apply(lambda text: translator.translate(text, src='hi', dest='en').text)\n# Save the translated output\ndf.to_excel(\"translated_output.xlsx\", index=False)",
        "detail": "PY.translate",
        "documentation": {}
    },
    {
        "label": "translator",
        "kind": 5,
        "importPath": "PY.translate",
        "description": "PY.translate",
        "peekOfCode": "translator = Translator()\n# Translate Hindi text in column C (index 2)\ndf['Translated_Village'] = df.iloc[:, 2].astype(str).apply(lambda text: translator.translate(text, src='hi', dest='en').text)\n# Save the translated output\ndf.to_excel(\"translated_output.xlsx\", index=False)",
        "detail": "PY.translate",
        "documentation": {}
    },
    {
        "label": "df['Translated_Village']",
        "kind": 5,
        "importPath": "PY.translate",
        "description": "PY.translate",
        "peekOfCode": "df['Translated_Village'] = df.iloc[:, 2].astype(str).apply(lambda text: translator.translate(text, src='hi', dest='en').text)\n# Save the translated output\ndf.to_excel(\"translated_output.xlsx\", index=False)",
        "detail": "PY.translate",
        "documentation": {}
    },
    {
        "label": "Calculator",
        "kind": 6,
        "importPath": "PY.Untitled-2",
        "description": "PY.Untitled-2",
        "peekOfCode": "class Calculator:\n    def __init__(self, n=None):\n        self.n = n\n        self.current = 0\n    def add(self, a=0, b=0, d=0):\n        return a + b + d\n    def multiply(self, *args):\n        result = 1\n        for num in args:\n            result *= num",
        "detail": "PY.Untitled-2",
        "documentation": {}
    },
    {
        "label": "even_calc",
        "kind": 5,
        "importPath": "PY.Untitled-2",
        "description": "PY.Untitled-2",
        "peekOfCode": "even_calc = Calculator(10)  # pass n here\nfor num in even_calc:\n    print(num, end=\" \")  # Output: 0 2 4 6 8 10\nprint(\"\\n\", even_calc.add(5))\nprint(even_calc.add(5, 10))\nprint(even_calc.multiply(2, 3))\nprint(even_calc.multiply(2, 4, 6))",
        "detail": "PY.Untitled-2",
        "documentation": {}
    },
    {
        "label": "studen",
        "kind": 6,
        "importPath": "PY.Untitled-4",
        "description": "PY.Untitled-4",
        "peekOfCode": "class student :\n    def __init__(self,name , roll_no):\n        self.name = name\n        self.roll_no = roll_no\n    def detail (self,):\n        print(f\"his name is {self.name}  and roll is {self.roll_no}\")\na = student(\"rahul\",26)\na.detail()",
        "detail": "PY.Untitled-4",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "PY.Untitled-4",
        "description": "PY.Untitled-4",
        "peekOfCode": "a = student(\"rahul\",26)\na.detail()",
        "detail": "PY.Untitled-4",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "selenium_practice..venv.Scripts.activate_this",
        "description": "selenium_practice..venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "selenium_practice..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "selenium_practice..venv.Scripts.activate_this",
        "description": "selenium_practice..venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": "selenium_practice..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "selenium_practice..venv.Scripts.activate_this",
        "description": "selenium_practice..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "selenium_practice..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "selenium_practice..venv.Scripts.activate_this",
        "description": "selenium_practice..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "selenium_practice..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "selenium_practice..venv.Scripts.activate_this",
        "description": "selenium_practice..venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "selenium_practice..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "selenium_practice..venv.Scripts.activate_this",
        "description": "selenium_practice..venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "selenium_practice..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "selenium_practice..venv.Scripts.activate_this",
        "description": "selenium_practice..venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "selenium_practice..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "selenium_practice..venv.Scripts.activate_this",
        "description": "selenium_practice..venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "selenium_practice..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "selenium_practice..venv.Scripts.activate_this",
        "description": "selenium_practice..venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "selenium_practice..venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.1findElement",
        "description": "selenium_practice.1findElement",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()#maximize browser window\ndriver.find_element(By.ID, \"small-searchterms\").send_keys(\"Lenovo Thinkpad X1 Carbon Laptop\")\ndriver.find_element(By.LINK_TEXT, \"Register\").click()\nsliders = driver.find_elements(By.TAG_NAME, \"a\")\nprint(len(sliders))\ntime.sleep(2)\n#linktext and partial link text",
        "detail": "selenium_practice.1findElement",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.1findElement",
        "description": "selenium_practice.1findElement",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()#maximize browser window\ndriver.find_element(By.ID, \"small-searchterms\").send_keys(\"Lenovo Thinkpad X1 Carbon Laptop\")\ndriver.find_element(By.LINK_TEXT, \"Register\").click()\nsliders = driver.find_elements(By.TAG_NAME, \"a\")\nprint(len(sliders))\ntime.sleep(2)\n#linktext and partial link text\n# driver.find_element(By.LINK_TEXT, )",
        "detail": "selenium_practice.1findElement",
        "documentation": {}
    },
    {
        "label": "sliders",
        "kind": 5,
        "importPath": "selenium_practice.1findElement",
        "description": "selenium_practice.1findElement",
        "peekOfCode": "sliders = driver.find_elements(By.TAG_NAME, \"a\")\nprint(len(sliders))\ntime.sleep(2)\n#linktext and partial link text\n# driver.find_element(By.LINK_TEXT, )",
        "detail": "selenium_practice.1findElement",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.action_chain_drag_and_drop_",
        "description": "selenium_practice.action_chain_drag_and_drop_",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://demo.automationtesting.in/Static.html')\ndriver.maximize_window()\ntime.sleep(3)\nsrc_ele = driver.find_element(By.XPATH, '//*[@id=\"dragarea\"]/div[2]')\ntarget_ele = driver.find_element(By.XPATH, '//*[@id=\"droparea\"]')\nact = ActionChains(driver)\nact.drag_and_drop(src_ele, target_ele).perform()",
        "detail": "selenium_practice.action_chain_drag_and_drop_",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.action_chain_drag_and_drop_",
        "description": "selenium_practice.action_chain_drag_and_drop_",
        "peekOfCode": "driver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://demo.automationtesting.in/Static.html')\ndriver.maximize_window()\ntime.sleep(3)\nsrc_ele = driver.find_element(By.XPATH, '//*[@id=\"dragarea\"]/div[2]')\ntarget_ele = driver.find_element(By.XPATH, '//*[@id=\"droparea\"]')\nact = ActionChains(driver)\nact.drag_and_drop(src_ele, target_ele).perform()",
        "detail": "selenium_practice.action_chain_drag_and_drop_",
        "documentation": {}
    },
    {
        "label": "src_ele",
        "kind": 5,
        "importPath": "selenium_practice.action_chain_drag_and_drop_",
        "description": "selenium_practice.action_chain_drag_and_drop_",
        "peekOfCode": "src_ele = driver.find_element(By.XPATH, '//*[@id=\"dragarea\"]/div[2]')\ntarget_ele = driver.find_element(By.XPATH, '//*[@id=\"droparea\"]')\nact = ActionChains(driver)\nact.drag_and_drop(src_ele, target_ele).perform()",
        "detail": "selenium_practice.action_chain_drag_and_drop_",
        "documentation": {}
    },
    {
        "label": "target_ele",
        "kind": 5,
        "importPath": "selenium_practice.action_chain_drag_and_drop_",
        "description": "selenium_practice.action_chain_drag_and_drop_",
        "peekOfCode": "target_ele = driver.find_element(By.XPATH, '//*[@id=\"droparea\"]')\nact = ActionChains(driver)\nact.drag_and_drop(src_ele, target_ele).perform()",
        "detail": "selenium_practice.action_chain_drag_and_drop_",
        "documentation": {}
    },
    {
        "label": "act",
        "kind": 5,
        "importPath": "selenium_practice.action_chain_drag_and_drop_",
        "description": "selenium_practice.action_chain_drag_and_drop_",
        "peekOfCode": "act = ActionChains(driver)\nact.drag_and_drop(src_ele, target_ele).perform()",
        "detail": "selenium_practice.action_chain_drag_and_drop_",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.application_command",
        "description": "selenium_practice.application_command",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\n#application commands  \n#get  title current_url page_source\ndriver.get(\"https://money.rediff.com/gainers/bse/daily/groupall\")\nprint(driver.title)\nprint(driver.current_url)\nprint(driver.page_source)",
        "detail": "selenium_practice.application_command",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.application_command",
        "description": "selenium_practice.application_command",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\n#application commands  \n#get  title current_url page_source\ndriver.get(\"https://money.rediff.com/gainers/bse/daily/groupall\")\nprint(driver.title)\nprint(driver.current_url)\nprint(driver.page_source)",
        "detail": "selenium_practice.application_command",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.authentication_through_url_popupwindow",
        "description": "selenium_practice.authentication_through_url_popupwindow",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://admin:admin@the-internet.herokuapp.com/basic_auth\")\ndriver.maximize_window()#maximize browser window\ntime.sleep(5)",
        "detail": "selenium_practice.authentication_through_url_popupwindow",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.authentication_through_url_popupwindow",
        "description": "selenium_practice.authentication_through_url_popupwindow",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://admin:admin@the-internet.herokuapp.com/basic_auth\")\ndriver.maximize_window()#maximize browser window\ntime.sleep(5)",
        "detail": "selenium_practice.authentication_through_url_popupwindow",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.browser_commands",
        "description": "selenium_practice.browser_commands",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()\n# driver.find_element(By.XPATH,\"//ul[@class='top-menu notmobile']//a[normalize-space()='Computers']\" ).click()\ndriver.find_element(By.LINK_TEXT, \"Computers\").click()\ntime.sleep(5)\n# driver.close()\ndriver.quit()",
        "detail": "selenium_practice.browser_commands",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.browser_commands",
        "description": "selenium_practice.browser_commands",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()\n# driver.find_element(By.XPATH,\"//ul[@class='top-menu notmobile']//a[normalize-space()='Computers']\" ).click()\ndriver.find_element(By.LINK_TEXT, \"Computers\").click()\ntime.sleep(5)\n# driver.close()\ndriver.quit()",
        "detail": "selenium_practice.browser_commands",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.chainAction_mouse_Operations",
        "description": "selenium_practice.chainAction_mouse_Operations",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://demo.automationtesting.in/WebTable.html')\ndriver.maximize_window()\ntime.sleep(3)\na = driver.find_element(By.XPATH, '//a[normalize-space()=\"Interactions\"]')\nb = driver.find_element(By.XPATH, '//a[normalize-space()=\"Drag and Drop\"]')\nc = driver.find_element(By.XPATH, '//a[normalize-space()=\"Static\"]')\n#mouse hover movement\nact = ActionChains(driver)",
        "detail": "selenium_practice.chainAction_mouse_Operations",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.chainAction_mouse_Operations",
        "description": "selenium_practice.chainAction_mouse_Operations",
        "peekOfCode": "driver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://demo.automationtesting.in/WebTable.html')\ndriver.maximize_window()\ntime.sleep(3)\na = driver.find_element(By.XPATH, '//a[normalize-space()=\"Interactions\"]')\nb = driver.find_element(By.XPATH, '//a[normalize-space()=\"Drag and Drop\"]')\nc = driver.find_element(By.XPATH, '//a[normalize-space()=\"Static\"]')\n#mouse hover movement\nact = ActionChains(driver)\nact.move_to_element(a).move_to_element(b).move_to_element(c).click().perform()",
        "detail": "selenium_practice.chainAction_mouse_Operations",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "selenium_practice.chainAction_mouse_Operations",
        "description": "selenium_practice.chainAction_mouse_Operations",
        "peekOfCode": "a = driver.find_element(By.XPATH, '//a[normalize-space()=\"Interactions\"]')\nb = driver.find_element(By.XPATH, '//a[normalize-space()=\"Drag and Drop\"]')\nc = driver.find_element(By.XPATH, '//a[normalize-space()=\"Static\"]')\n#mouse hover movement\nact = ActionChains(driver)\nact.move_to_element(a).move_to_element(b).move_to_element(c).click().perform()\ntime.sleep(3)",
        "detail": "selenium_practice.chainAction_mouse_Operations",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "selenium_practice.chainAction_mouse_Operations",
        "description": "selenium_practice.chainAction_mouse_Operations",
        "peekOfCode": "b = driver.find_element(By.XPATH, '//a[normalize-space()=\"Drag and Drop\"]')\nc = driver.find_element(By.XPATH, '//a[normalize-space()=\"Static\"]')\n#mouse hover movement\nact = ActionChains(driver)\nact.move_to_element(a).move_to_element(b).move_to_element(c).click().perform()\ntime.sleep(3)",
        "detail": "selenium_practice.chainAction_mouse_Operations",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "selenium_practice.chainAction_mouse_Operations",
        "description": "selenium_practice.chainAction_mouse_Operations",
        "peekOfCode": "c = driver.find_element(By.XPATH, '//a[normalize-space()=\"Static\"]')\n#mouse hover movement\nact = ActionChains(driver)\nact.move_to_element(a).move_to_element(b).move_to_element(c).click().perform()\ntime.sleep(3)",
        "detail": "selenium_practice.chainAction_mouse_Operations",
        "documentation": {}
    },
    {
        "label": "act",
        "kind": 5,
        "importPath": "selenium_practice.chainAction_mouse_Operations",
        "description": "selenium_practice.chainAction_mouse_Operations",
        "peekOfCode": "act = ActionChains(driver)\nact.move_to_element(a).move_to_element(b).move_to_element(c).click().perform()\ntime.sleep(3)",
        "detail": "selenium_practice.chainAction_mouse_Operations",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.chain_action_right_click",
        "description": "selenium_practice.chain_action_right_click",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://swisnl.github.io/jQuery-contextMenu/demo.html')\ndriver.maximize_window()\ntime.sleep(3)\nbutton = driver.find_element(By.XPATH, \"/html/body/div/section/div/div/div/p/span\")\nact = ActionChains(driver)\nact.context_click(button).perform()\ntime.sleep(4)",
        "detail": "selenium_practice.chain_action_right_click",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.chain_action_right_click",
        "description": "selenium_practice.chain_action_right_click",
        "peekOfCode": "driver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://swisnl.github.io/jQuery-contextMenu/demo.html')\ndriver.maximize_window()\ntime.sleep(3)\nbutton = driver.find_element(By.XPATH, \"/html/body/div/section/div/div/div/p/span\")\nact = ActionChains(driver)\nact.context_click(button).perform()\ntime.sleep(4)",
        "detail": "selenium_practice.chain_action_right_click",
        "documentation": {}
    },
    {
        "label": "button",
        "kind": 5,
        "importPath": "selenium_practice.chain_action_right_click",
        "description": "selenium_practice.chain_action_right_click",
        "peekOfCode": "button = driver.find_element(By.XPATH, \"/html/body/div/section/div/div/div/p/span\")\nact = ActionChains(driver)\nact.context_click(button).perform()\ntime.sleep(4)",
        "detail": "selenium_practice.chain_action_right_click",
        "documentation": {}
    },
    {
        "label": "act",
        "kind": 5,
        "importPath": "selenium_practice.chain_action_right_click",
        "description": "selenium_practice.chain_action_right_click",
        "peekOfCode": "act = ActionChains(driver)\nact.context_click(button).perform()\ntime.sleep(4)",
        "detail": "selenium_practice.chain_action_right_click",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.checkbox_selection",
        "description": "selenium_practice.checkbox_selection",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://rahulshettyacademy.com/AutomationPractice/\")\ndriver.maximize_window()\n#select specific checkbox from list\n# driver.find_element(By.XPATH, '//input[@id=\"checkBoxOption1\"]').click()\n#select all check boxes\ncheckboxes = driver.find_elements(By.XPATH, '//input[@type = \"checkbox\"]')\nprint(\"all check boxes are      \",len(checkboxes))\n# for i in range(len(checkboxes)):",
        "detail": "selenium_practice.checkbox_selection",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.checkbox_selection",
        "description": "selenium_practice.checkbox_selection",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://rahulshettyacademy.com/AutomationPractice/\")\ndriver.maximize_window()\n#select specific checkbox from list\n# driver.find_element(By.XPATH, '//input[@id=\"checkBoxOption1\"]').click()\n#select all check boxes\ncheckboxes = driver.find_elements(By.XPATH, '//input[@type = \"checkbox\"]')\nprint(\"all check boxes are      \",len(checkboxes))\n# for i in range(len(checkboxes)):\n#     checkboxes[i].click()",
        "detail": "selenium_practice.checkbox_selection",
        "documentation": {}
    },
    {
        "label": "checkboxes",
        "kind": 5,
        "importPath": "selenium_practice.checkbox_selection",
        "description": "selenium_practice.checkbox_selection",
        "peekOfCode": "checkboxes = driver.find_elements(By.XPATH, '//input[@type = \"checkbox\"]')\nprint(\"all check boxes are      \",len(checkboxes))\n# for i in range(len(checkboxes)):\n#     checkboxes[i].click()\n# aproach 2\nfor checkbox in checkboxes:\n    checkbox.click()\n#3 selewct multiple check boxes using condition\nfor checkbox in checkboxes:\n    optname = checkbox.get_attribute('id')",
        "detail": "selenium_practice.checkbox_selection",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.collecting_tabledata",
        "description": "selenium_practice.collecting_tabledata",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://opensource-demo.orangehrmlive.com/web/index.php/auth/login')\ndriver.maximize_window()\ntime.sleep(3)\n#login creditial//input[@placeholder=\"username\"]\ndriver.find_element(By.XPATH, '//input[@placeholder=\"Username\"]').send_keys('Admin')\ndriver.find_element(By.XPATH, '//input[@placeholder=\"Password\"]').send_keys('admin123')\ndriver.find_element(By.XPATH, '//button[normalize-space()=\"Login\"]').click()\ntime.sleep(4)",
        "detail": "selenium_practice.collecting_tabledata",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.collecting_tabledata",
        "description": "selenium_practice.collecting_tabledata",
        "peekOfCode": "driver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://opensource-demo.orangehrmlive.com/web/index.php/auth/login')\ndriver.maximize_window()\ntime.sleep(3)\n#login creditial//input[@placeholder=\"username\"]\ndriver.find_element(By.XPATH, '//input[@placeholder=\"Username\"]').send_keys('Admin')\ndriver.find_element(By.XPATH, '//input[@placeholder=\"Password\"]').send_keys('admin123')\ndriver.find_element(By.XPATH, '//button[normalize-space()=\"Login\"]').click()\ntime.sleep(4)\ndriver.find_element(By.XPATH, '//aside[@class=\"oxd-sidepanel\"]//li[1]').click()",
        "detail": "selenium_practice.collecting_tabledata",
        "documentation": {}
    },
    {
        "label": "wait",
        "kind": 5,
        "importPath": "selenium_practice.collecting_tabledata",
        "description": "selenium_practice.collecting_tabledata",
        "peekOfCode": "wait = WebDriverWait(driver, 10)\ndropdown_item = wait.until(EC.presence_of_element_located((By.XPATH, \"//ul[@class='oxd-dropdown-menu']//li\")))\ndropdown_item.click()\ntime.sleep(2)\nrows_list = driver.find_elements(By.XPATH, '//div[@class=\"oxd-table-body\"]/div')\nprint('total number of rows : ',len(rows_list))\ncount = 0\nfor i in range(1,len(rows_list)+1):\n    status = driver.find_element(By.XPATH,'//div[@class=\"oxd-table-body\"]/div['+str(i)+']/div/div[5]')\n    if status.text == 'Enabled':",
        "detail": "selenium_practice.collecting_tabledata",
        "documentation": {}
    },
    {
        "label": "dropdown_item",
        "kind": 5,
        "importPath": "selenium_practice.collecting_tabledata",
        "description": "selenium_practice.collecting_tabledata",
        "peekOfCode": "dropdown_item = wait.until(EC.presence_of_element_located((By.XPATH, \"//ul[@class='oxd-dropdown-menu']//li\")))\ndropdown_item.click()\ntime.sleep(2)\nrows_list = driver.find_elements(By.XPATH, '//div[@class=\"oxd-table-body\"]/div')\nprint('total number of rows : ',len(rows_list))\ncount = 0\nfor i in range(1,len(rows_list)+1):\n    status = driver.find_element(By.XPATH,'//div[@class=\"oxd-table-body\"]/div['+str(i)+']/div/div[5]')\n    if status.text == 'Enabled':\n        count+=1",
        "detail": "selenium_practice.collecting_tabledata",
        "documentation": {}
    },
    {
        "label": "rows_list",
        "kind": 5,
        "importPath": "selenium_practice.collecting_tabledata",
        "description": "selenium_practice.collecting_tabledata",
        "peekOfCode": "rows_list = driver.find_elements(By.XPATH, '//div[@class=\"oxd-table-body\"]/div')\nprint('total number of rows : ',len(rows_list))\ncount = 0\nfor i in range(1,len(rows_list)+1):\n    status = driver.find_element(By.XPATH,'//div[@class=\"oxd-table-body\"]/div['+str(i)+']/div/div[5]')\n    if status.text == 'Enabled':\n        count+=1\nprint(\"total enabled users\",count)\ntime.sleep(10)",
        "detail": "selenium_practice.collecting_tabledata",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "selenium_practice.collecting_tabledata",
        "description": "selenium_practice.collecting_tabledata",
        "peekOfCode": "count = 0\nfor i in range(1,len(rows_list)+1):\n    status = driver.find_element(By.XPATH,'//div[@class=\"oxd-table-body\"]/div['+str(i)+']/div/div[5]')\n    if status.text == 'Enabled':\n        count+=1\nprint(\"total enabled users\",count)\ntime.sleep(10)",
        "detail": "selenium_practice.collecting_tabledata",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.conditional_command",
        "description": "selenium_practice.conditional_command",
        "peekOfCode": "serv_obj = Service(\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/register?returnUrl=%2F\")\ndriver.maximize_window()\n#code herer\n# search_box = driver.find_element(By.XPATH, '//input[@id=\"small-searchterms\"]')\n# print(search_box.is_displayed())\n# print(search_box.is_enabled())\nrd_male = driver.find_element(By.XPATH, \"//input[@id='gender-male']\")\nprint(rd_male.is_selected())",
        "detail": "selenium_practice.conditional_command",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.conditional_command",
        "description": "selenium_practice.conditional_command",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/register?returnUrl=%2F\")\ndriver.maximize_window()\n#code herer\n# search_box = driver.find_element(By.XPATH, '//input[@id=\"small-searchterms\"]')\n# print(search_box.is_displayed())\n# print(search_box.is_enabled())\nrd_male = driver.find_element(By.XPATH, \"//input[@id='gender-male']\")\nprint(rd_male.is_selected())\nrd_male.click()",
        "detail": "selenium_practice.conditional_command",
        "documentation": {}
    },
    {
        "label": "rd_male",
        "kind": 5,
        "importPath": "selenium_practice.conditional_command",
        "description": "selenium_practice.conditional_command",
        "peekOfCode": "rd_male = driver.find_element(By.XPATH, \"//input[@id='gender-male']\")\nprint(rd_male.is_selected())\nrd_male.click()\ntime.sleep(2)\nprint(\"after selecting\")\n# rd_male = driver.find_element(By.XPATH, '//span[@class=\"male\"]/following::*')\nprint(rd_male.is_selected())",
        "detail": "selenium_practice.conditional_command",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.conditional_operation",
        "description": "selenium_practice.conditional_operation",
        "peekOfCode": "serv_obj = Service(\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/register?returnUrl=%2F\")\ndriver.maximize_window()\n#code herer\n# search_box = driver.find_element(By.XPATH, '//input[@id=\"small-searchterms\"]')\n# print(search_box.is_displayed())\n# print(search_box.is_enabled())\nrd_male = driver.find_element(By.XPATH, \"//input[@id='gender-male']\")\nprint(rd_male.is_selected())",
        "detail": "selenium_practice.conditional_operation",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.conditional_operation",
        "description": "selenium_practice.conditional_operation",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/register?returnUrl=%2F\")\ndriver.maximize_window()\n#code herer\n# search_box = driver.find_element(By.XPATH, '//input[@id=\"small-searchterms\"]')\n# print(search_box.is_displayed())\n# print(search_box.is_enabled())\nrd_male = driver.find_element(By.XPATH, \"//input[@id='gender-male']\")\nprint(rd_male.is_selected())\nrd_male.click()",
        "detail": "selenium_practice.conditional_operation",
        "documentation": {}
    },
    {
        "label": "rd_male",
        "kind": 5,
        "importPath": "selenium_practice.conditional_operation",
        "description": "selenium_practice.conditional_operation",
        "peekOfCode": "rd_male = driver.find_element(By.XPATH, \"//input[@id='gender-male']\")\nprint(rd_male.is_selected())\nrd_male.click()\ntime.sleep(2)\nprint(\"after selecting\")\n# rd_male = driver.find_element(By.XPATH, '//span[@class=\"male\"]/following::*')\nprint(rd_male.is_selected())",
        "detail": "selenium_practice.conditional_operation",
        "documentation": {}
    },
    {
        "label": "loc",
        "kind": 5,
        "importPath": "selenium_practice.coockie_handling",
        "description": "selenium_practice.coockie_handling",
        "peekOfCode": "loc = os.getcwd()\nfrom selenium.webdriver.chrome.service import Service\nserv_obj = Service(r'C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe')\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://demo.nopcommerce.com/')\ndriver.maximize_window()\ncookie = driver.get_cookies()\nprint(\"coolie dict length\", len(cookie))\nfor i in cookie :\n    print(i['name']+':')",
        "detail": "selenium_practice.coockie_handling",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.coockie_handling",
        "description": "selenium_practice.coockie_handling",
        "peekOfCode": "serv_obj = Service(r'C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe')\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://demo.nopcommerce.com/')\ndriver.maximize_window()\ncookie = driver.get_cookies()\nprint(\"coolie dict length\", len(cookie))\nfor i in cookie :\n    print(i['name']+':')\n    print(type(i.get('name')),':',i.get('secure'))\n    pass",
        "detail": "selenium_practice.coockie_handling",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.coockie_handling",
        "description": "selenium_practice.coockie_handling",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://demo.nopcommerce.com/')\ndriver.maximize_window()\ncookie = driver.get_cookies()\nprint(\"coolie dict length\", len(cookie))\nfor i in cookie :\n    print(i['name']+':')\n    print(type(i.get('name')),':',i.get('secure'))\n    pass\ndriver.add_cookie({\"name\": \"mycookie\",",
        "detail": "selenium_practice.coockie_handling",
        "documentation": {}
    },
    {
        "label": "cookie",
        "kind": 5,
        "importPath": "selenium_practice.coockie_handling",
        "description": "selenium_practice.coockie_handling",
        "peekOfCode": "cookie = driver.get_cookies()\nprint(\"coolie dict length\", len(cookie))\nfor i in cookie :\n    print(i['name']+':')\n    print(type(i.get('name')),':',i.get('secure'))\n    pass\ndriver.add_cookie({\"name\": \"mycookie\",\n    \"value\": \"12345621\",\n    \"secure\": True})\ncookie = driver.get_cookies()",
        "detail": "selenium_practice.coockie_handling",
        "documentation": {}
    },
    {
        "label": "cookie",
        "kind": 5,
        "importPath": "selenium_practice.coockie_handling",
        "description": "selenium_practice.coockie_handling",
        "peekOfCode": "cookie = driver.get_cookies()\nprint(\"coolie dict length new \", len(cookie))\nfor i in cookie :\n    print(i['name']+':')\n    print(type(i.get('name')),':',i.get('secure'))\n# delete specific cookie \ndriver.delete_cookie(\"mycookie\")\ncookie = driver.get_cookies()\nprint(len(cookie))\ndriver.delete_all_cookies()",
        "detail": "selenium_practice.coockie_handling",
        "documentation": {}
    },
    {
        "label": "cookie",
        "kind": 5,
        "importPath": "selenium_practice.coockie_handling",
        "description": "selenium_practice.coockie_handling",
        "peekOfCode": "cookie = driver.get_cookies()\nprint(len(cookie))\ndriver.delete_all_cookies()\ncookie = driver.get_cookies()\nprint(len(cookie))\nfor i in cookie :\n    print(i['name']+':')\n    print(type(i.get('name')),':',i.get('secure'))",
        "detail": "selenium_practice.coockie_handling",
        "documentation": {}
    },
    {
        "label": "cookie",
        "kind": 5,
        "importPath": "selenium_practice.coockie_handling",
        "description": "selenium_practice.coockie_handling",
        "peekOfCode": "cookie = driver.get_cookies()\nprint(len(cookie))\nfor i in cookie :\n    print(i['name']+':')\n    print(type(i.get('name')),':',i.get('secure'))",
        "detail": "selenium_practice.coockie_handling",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.copyPasteAutomation",
        "description": "selenium_practice.copyPasteAutomation",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://text-compare.com/')\ndriver.maximize_window()\nimput1 = driver.find_element(By.XPATH, '//*[@id=\"inputText1\"]')\nimput2 = driver.find_element(By.XPATH, '//*[@id=\"inputText2\"]')\n# driver.find_element(By.XPATH, \"\")\nimput1.send_keys(\"jju2bijbrratatatata\")\nact = ActionChains(driver)\nact.key_down(Keys.CONTROL).send_keys(\"a\").key_up(Keys.CONTROL).perform()",
        "detail": "selenium_practice.copyPasteAutomation",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.copyPasteAutomation",
        "description": "selenium_practice.copyPasteAutomation",
        "peekOfCode": "driver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://text-compare.com/')\ndriver.maximize_window()\nimput1 = driver.find_element(By.XPATH, '//*[@id=\"inputText1\"]')\nimput2 = driver.find_element(By.XPATH, '//*[@id=\"inputText2\"]')\n# driver.find_element(By.XPATH, \"\")\nimput1.send_keys(\"jju2bijbrratatatata\")\nact = ActionChains(driver)\nact.key_down(Keys.CONTROL).send_keys(\"a\").key_up(Keys.CONTROL).perform()\n# input 1 ---> copy  Copy TEXT",
        "detail": "selenium_practice.copyPasteAutomation",
        "documentation": {}
    },
    {
        "label": "imput1",
        "kind": 5,
        "importPath": "selenium_practice.copyPasteAutomation",
        "description": "selenium_practice.copyPasteAutomation",
        "peekOfCode": "imput1 = driver.find_element(By.XPATH, '//*[@id=\"inputText1\"]')\nimput2 = driver.find_element(By.XPATH, '//*[@id=\"inputText2\"]')\n# driver.find_element(By.XPATH, \"\")\nimput1.send_keys(\"jju2bijbrratatatata\")\nact = ActionChains(driver)\nact.key_down(Keys.CONTROL).send_keys(\"a\").key_up(Keys.CONTROL).perform()\n# input 1 ---> copy  Copy TEXT\nact.key_down(Keys.CONTROL).send_keys(\"c\").key_up(Keys.CONTROL).perform()\n#use tab to change box of input \nact.send_keys(Keys.TAB).perform()",
        "detail": "selenium_practice.copyPasteAutomation",
        "documentation": {}
    },
    {
        "label": "imput2",
        "kind": 5,
        "importPath": "selenium_practice.copyPasteAutomation",
        "description": "selenium_practice.copyPasteAutomation",
        "peekOfCode": "imput2 = driver.find_element(By.XPATH, '//*[@id=\"inputText2\"]')\n# driver.find_element(By.XPATH, \"\")\nimput1.send_keys(\"jju2bijbrratatatata\")\nact = ActionChains(driver)\nact.key_down(Keys.CONTROL).send_keys(\"a\").key_up(Keys.CONTROL).perform()\n# input 1 ---> copy  Copy TEXT\nact.key_down(Keys.CONTROL).send_keys(\"c\").key_up(Keys.CONTROL).perform()\n#use tab to change box of input \nact.send_keys(Keys.TAB).perform()\n# paste command",
        "detail": "selenium_practice.copyPasteAutomation",
        "documentation": {}
    },
    {
        "label": "act",
        "kind": 5,
        "importPath": "selenium_practice.copyPasteAutomation",
        "description": "selenium_practice.copyPasteAutomation",
        "peekOfCode": "act = ActionChains(driver)\nact.key_down(Keys.CONTROL).send_keys(\"a\").key_up(Keys.CONTROL).perform()\n# input 1 ---> copy  Copy TEXT\nact.key_down(Keys.CONTROL).send_keys(\"c\").key_up(Keys.CONTROL).perform()\n#use tab to change box of input \nact.send_keys(Keys.TAB).perform()\n# paste command\nact.key_down(Keys.CONTROL).send_keys(\"v\").key_up(Keys.CONTROL).perform()\ntime.sleep(3)",
        "detail": "selenium_practice.copyPasteAutomation",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.count_htmltable_rows_column",
        "description": "selenium_practice.count_htmltable_rows_column",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\n#  count number of rows in a web table\ndriver.get('https://testautomationpractice.blogspot.com/')\ndriver.maximize_window()\ntime.sleep(4)\nno_of_col = driver.find_elements(By.XPATH, '//*[@id=\"HTML1\"]/div[1]/table/tbody/tr[1]/th')\nno_rows = driver.find_elements(By.XPATH, \"//table[@name = 'BookTable']//tr\")\nfor i in no_of_col:\n    print(i.text)",
        "detail": "selenium_practice.count_htmltable_rows_column",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.count_htmltable_rows_column",
        "description": "selenium_practice.count_htmltable_rows_column",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\n#  count number of rows in a web table\ndriver.get('https://testautomationpractice.blogspot.com/')\ndriver.maximize_window()\ntime.sleep(4)\nno_of_col = driver.find_elements(By.XPATH, '//*[@id=\"HTML1\"]/div[1]/table/tbody/tr[1]/th')\nno_rows = driver.find_elements(By.XPATH, \"//table[@name = 'BookTable']//tr\")\nfor i in no_of_col:\n    print(i.text)\nfor i in no_rows:",
        "detail": "selenium_practice.count_htmltable_rows_column",
        "documentation": {}
    },
    {
        "label": "no_of_col",
        "kind": 5,
        "importPath": "selenium_practice.count_htmltable_rows_column",
        "description": "selenium_practice.count_htmltable_rows_column",
        "peekOfCode": "no_of_col = driver.find_elements(By.XPATH, '//*[@id=\"HTML1\"]/div[1]/table/tbody/tr[1]/th')\nno_rows = driver.find_elements(By.XPATH, \"//table[@name = 'BookTable']//tr\")\nfor i in no_of_col:\n    print(i.text)\nfor i in no_rows:\n    print(i.text)\nprint(len(no_of_col))\nprint('rows',len(no_rows))\n# how to read proper table content of specific row or column",
        "detail": "selenium_practice.count_htmltable_rows_column",
        "documentation": {}
    },
    {
        "label": "no_rows",
        "kind": 5,
        "importPath": "selenium_practice.count_htmltable_rows_column",
        "description": "selenium_practice.count_htmltable_rows_column",
        "peekOfCode": "no_rows = driver.find_elements(By.XPATH, \"//table[@name = 'BookTable']//tr\")\nfor i in no_of_col:\n    print(i.text)\nfor i in no_rows:\n    print(i.text)\nprint(len(no_of_col))\nprint('rows',len(no_rows))\n# how to read proper table content of specific row or column",
        "detail": "selenium_practice.count_htmltable_rows_column",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.date_picker1",
        "description": "selenium_practice.date_picker1",
        "peekOfCode": "serv_obj = Service('C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe')\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://jqueryui.com/datepicker/\")\ndriver.maximize_window()\nyear = \"2027\"\nmonth = \"August\"\ndate = '25'\ndriver.switch_to.frame(0)\ndriver.find_element(By.XPATH, '//*[@id=\"datepicker\"]').click()\nwhile True:",
        "detail": "selenium_practice.date_picker1",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.date_picker1",
        "description": "selenium_practice.date_picker1",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://jqueryui.com/datepicker/\")\ndriver.maximize_window()\nyear = \"2027\"\nmonth = \"August\"\ndate = '25'\ndriver.switch_to.frame(0)\ndriver.find_element(By.XPATH, '//*[@id=\"datepicker\"]').click()\nwhile True:\n    yr = driver.find_element(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/div/div/span[2]').text",
        "detail": "selenium_practice.date_picker1",
        "documentation": {}
    },
    {
        "label": "year",
        "kind": 5,
        "importPath": "selenium_practice.date_picker1",
        "description": "selenium_practice.date_picker1",
        "peekOfCode": "year = \"2027\"\nmonth = \"August\"\ndate = '25'\ndriver.switch_to.frame(0)\ndriver.find_element(By.XPATH, '//*[@id=\"datepicker\"]').click()\nwhile True:\n    yr = driver.find_element(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/div/div/span[2]').text\n    mon = driver.find_element(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/div/div/span[1]').text\n    if month == mon and yr == year :\n        break",
        "detail": "selenium_practice.date_picker1",
        "documentation": {}
    },
    {
        "label": "month",
        "kind": 5,
        "importPath": "selenium_practice.date_picker1",
        "description": "selenium_practice.date_picker1",
        "peekOfCode": "month = \"August\"\ndate = '25'\ndriver.switch_to.frame(0)\ndriver.find_element(By.XPATH, '//*[@id=\"datepicker\"]').click()\nwhile True:\n    yr = driver.find_element(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/div/div/span[2]').text\n    mon = driver.find_element(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/div/div/span[1]').text\n    if month == mon and yr == year :\n        break\n    else :",
        "detail": "selenium_practice.date_picker1",
        "documentation": {}
    },
    {
        "label": "date",
        "kind": 5,
        "importPath": "selenium_practice.date_picker1",
        "description": "selenium_practice.date_picker1",
        "peekOfCode": "date = '25'\ndriver.switch_to.frame(0)\ndriver.find_element(By.XPATH, '//*[@id=\"datepicker\"]').click()\nwhile True:\n    yr = driver.find_element(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/div/div/span[2]').text\n    mon = driver.find_element(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/div/div/span[1]').text\n    if month == mon and yr == year :\n        break\n    else :\n        driver.find_element(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/div/a[2]/span').click()",
        "detail": "selenium_practice.date_picker1",
        "documentation": {}
    },
    {
        "label": "dates",
        "kind": 5,
        "importPath": "selenium_practice.date_picker1",
        "description": "selenium_practice.date_picker1",
        "peekOfCode": "dates = driver.find_elements(By.XPATH, '//*[@id=\"ui-datepicker-div\"]//table/tbody/tr/td/a')\nfor element in dates:\n    if element.text == date:\n        element.click()\n        break\ntime.sleep(4)",
        "detail": "selenium_practice.date_picker1",
        "documentation": {}
    },
    {
        "label": "demoFindelement",
        "kind": 6,
        "importPath": "selenium_practice.DemoElementLocator",
        "description": "selenium_practice.DemoElementLocator",
        "peekOfCode": "class demoFindelement():\n    def locate_by_id_demo(self):\n        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        driver.get(\"https://secure.yatra.com/social/common/yatra/signin.htm\")\n        driver.find_element(By.ID ,\"login-input\" ).send_keys(\"test@test.com\")\nfindbyid = demoFindelement()\nfindbyid.locate_by_id_demo()",
        "detail": "selenium_practice.DemoElementLocator",
        "documentation": {}
    },
    {
        "label": "findbyid",
        "kind": 5,
        "importPath": "selenium_practice.DemoElementLocator",
        "description": "selenium_practice.DemoElementLocator",
        "peekOfCode": "findbyid = demoFindelement()\nfindbyid.locate_by_id_demo()",
        "detail": "selenium_practice.DemoElementLocator",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.double_click_action",
        "description": "selenium_practice.double_click_action",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service= serv_obj)\ndriver.implicitly_wait(12)\ndriver.get('https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_ev_ondblclick3')\ndriver.maximize_window()\ntime.sleep(3)\ndriver.switch_to.frame('iframeResult')\nfield = driver.find_element(By.XPATH , '//*[@id=\"field1\"]')\nfield.clear()\nfield.send_keys(\"alpha beta gama\")",
        "detail": "selenium_practice.double_click_action",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.double_click_action",
        "description": "selenium_practice.double_click_action",
        "peekOfCode": "driver = webdriver.Chrome(service= serv_obj)\ndriver.implicitly_wait(12)\ndriver.get('https://www.w3schools.com/tags/tryit.asp?filename=tryhtml5_ev_ondblclick3')\ndriver.maximize_window()\ntime.sleep(3)\ndriver.switch_to.frame('iframeResult')\nfield = driver.find_element(By.XPATH , '//*[@id=\"field1\"]')\nfield.clear()\nfield.send_keys(\"alpha beta gama\")\nact = ActionChains(driver)",
        "detail": "selenium_practice.double_click_action",
        "documentation": {}
    },
    {
        "label": "field",
        "kind": 5,
        "importPath": "selenium_practice.double_click_action",
        "description": "selenium_practice.double_click_action",
        "peekOfCode": "field = driver.find_element(By.XPATH , '//*[@id=\"field1\"]')\nfield.clear()\nfield.send_keys(\"alpha beta gama\")\nact = ActionChains(driver)\nbutton = driver.find_element(By.XPATH, '/html/body/button')\nact.double_click(button).perform()\ntime.sleep(3)",
        "detail": "selenium_practice.double_click_action",
        "documentation": {}
    },
    {
        "label": "act",
        "kind": 5,
        "importPath": "selenium_practice.double_click_action",
        "description": "selenium_practice.double_click_action",
        "peekOfCode": "act = ActionChains(driver)\nbutton = driver.find_element(By.XPATH, '/html/body/button')\nact.double_click(button).perform()\ntime.sleep(3)",
        "detail": "selenium_practice.double_click_action",
        "documentation": {}
    },
    {
        "label": "button",
        "kind": 5,
        "importPath": "selenium_practice.double_click_action",
        "description": "selenium_practice.double_click_action",
        "peekOfCode": "button = driver.find_element(By.XPATH, '/html/body/button')\nact.double_click(button).perform()\ntime.sleep(3)",
        "detail": "selenium_practice.double_click_action",
        "documentation": {}
    },
    {
        "label": "chrome_setup",
        "kind": 2,
        "importPath": "selenium_practice.downloading_file_from_browser_with_loca",
        "description": "selenium_practice.downloading_file_from_browser_with_loca",
        "peekOfCode": "def chrome_setup():\n    from selenium.webdriver.chrome.service import  Service\n    serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\n    # download file on desired location\n    # preferences = {\"download.default_directory\":r\"C:\\Users\\91878\\python_tutotial\\selenium_practice\"}\n    preferences = {\"download.default_directory\":f'{loc}\\selenium_practice', \"plugins.always_open_document_externally\":True}\n    ops = webdriver.ChromeOptions()\n    ops.add_experimental_option(\"prefs\",preferences)\n    driver = webdriver.Chrome(service=serv_obj,options=ops)\n    return driver",
        "detail": "selenium_practice.downloading_file_from_browser_with_loca",
        "documentation": {}
    },
    {
        "label": "loc",
        "kind": 5,
        "importPath": "selenium_practice.downloading_file_from_browser_with_loca",
        "description": "selenium_practice.downloading_file_from_browser_with_loca",
        "peekOfCode": "loc = os.getcwd()\nprint(loc)\ndef chrome_setup():\n    from selenium.webdriver.chrome.service import  Service\n    serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\n    # download file on desired location\n    # preferences = {\"download.default_directory\":r\"C:\\Users\\91878\\python_tutotial\\selenium_practice\"}\n    preferences = {\"download.default_directory\":f'{loc}\\selenium_practice', \"plugins.always_open_document_externally\":True}\n    ops = webdriver.ChromeOptions()\n    ops.add_experimental_option(\"prefs\",preferences)",
        "detail": "selenium_practice.downloading_file_from_browser_with_loca",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.downloading_file_from_browser_with_loca",
        "description": "selenium_practice.downloading_file_from_browser_with_loca",
        "peekOfCode": "driver = chrome_setup()\ndriver.get('https://www.examplefile.com/document/pdf/1-mb-pdf')\ndriver.maximize_window()\nflag = driver.find_element(By.XPATH, '//a[normalize-space()=\"Download\"]')\ndriver.execute_script('arguments[0].scrollIntoView();',flag)\ndriver.find_element(By.XPATH, '//a[normalize-space()=\"Download\"]').click()\ntime.sleep(3)\n# driver.close()\n#",
        "detail": "selenium_practice.downloading_file_from_browser_with_loca",
        "documentation": {}
    },
    {
        "label": "flag",
        "kind": 5,
        "importPath": "selenium_practice.downloading_file_from_browser_with_loca",
        "description": "selenium_practice.downloading_file_from_browser_with_loca",
        "peekOfCode": "flag = driver.find_element(By.XPATH, '//a[normalize-space()=\"Download\"]')\ndriver.execute_script('arguments[0].scrollIntoView();',flag)\ndriver.find_element(By.XPATH, '//a[normalize-space()=\"Download\"]').click()\ntime.sleep(3)\n# driver.close()\n#",
        "detail": "selenium_practice.downloading_file_from_browser_with_loca",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.dropdown_with_dynamic_path_each_time",
        "description": "selenium_practice.dropdown_with_dynamic_path_each_time",
        "peekOfCode": "serv_obj = Service(r'C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe')\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://www.dummyticket.com/dummy-ticket-for-visa-application/')\ndriver.maximize_window()\ntime.sleep(3)\ndriver.find_element(By.XPATH,'//*[@id=\"billing_country_field\"]/span/span').click()\ntime.sleep(3)\ncontry_lis = driver.find_elements(By.XPATH, '//*[@id=\"select2-billing_country-results\"]//li')\nprint(contry_lis[103].text)\nfor country in contry_lis:",
        "detail": "selenium_practice.dropdown_with_dynamic_path_each_time",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.dropdown_with_dynamic_path_each_time",
        "description": "selenium_practice.dropdown_with_dynamic_path_each_time",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://www.dummyticket.com/dummy-ticket-for-visa-application/')\ndriver.maximize_window()\ntime.sleep(3)\ndriver.find_element(By.XPATH,'//*[@id=\"billing_country_field\"]/span/span').click()\ntime.sleep(3)\ncontry_lis = driver.find_elements(By.XPATH, '//*[@id=\"select2-billing_country-results\"]//li')\nprint(contry_lis[103].text)\nfor country in contry_lis:\n    if country.text.strip().lower() == \"india\": #is it case sensitive",
        "detail": "selenium_practice.dropdown_with_dynamic_path_each_time",
        "documentation": {}
    },
    {
        "label": "contry_lis",
        "kind": 5,
        "importPath": "selenium_practice.dropdown_with_dynamic_path_each_time",
        "description": "selenium_practice.dropdown_with_dynamic_path_each_time",
        "peekOfCode": "contry_lis = driver.find_elements(By.XPATH, '//*[@id=\"select2-billing_country-results\"]//li')\nprint(contry_lis[103].text)\nfor country in contry_lis:\n    if country.text.strip().lower() == \"india\": #is it case sensitive\n        country.click()\n    # print(type(country.text))\n    # print(country.text)\n        print('we clicked the element')\n# time.sleep(3)\n# what is wrong here we need to call the list element each time in for loop since so that we dont get stale element error",
        "detail": "selenium_practice.dropdown_with_dynamic_path_each_time",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.dropdown_with_dynamic_path_each_time_correct",
        "description": "selenium_practice.dropdown_with_dynamic_path_each_time_correct",
        "peekOfCode": "serv_obj = Service(r'C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe')\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://www.dummyticket.com/dummy-ticket-for-visa-application/')\ndriver.maximize_window()\ntime.sleep(3)\n# Open dropdown\ndriver.find_element(By.XPATH, '//*[@id=\"billing_country_field\"]/span/span').click()\ntime.sleep(2)\n# Wait until elements are loaded (better with WebDriverWait in real use)\ncountry_xpath = '//*[@id=\"select2-billing_country-results\"]/li'",
        "detail": "selenium_practice.dropdown_with_dynamic_path_each_time_correct",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.dropdown_with_dynamic_path_each_time_correct",
        "description": "selenium_practice.dropdown_with_dynamic_path_each_time_correct",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://www.dummyticket.com/dummy-ticket-for-visa-application/')\ndriver.maximize_window()\ntime.sleep(3)\n# Open dropdown\ndriver.find_element(By.XPATH, '//*[@id=\"billing_country_field\"]/span/span').click()\ntime.sleep(2)\n# Wait until elements are loaded (better with WebDriverWait in real use)\ncountry_xpath = '//*[@id=\"select2-billing_country-results\"]/li'\n# Loop and click India",
        "detail": "selenium_practice.dropdown_with_dynamic_path_each_time_correct",
        "documentation": {}
    },
    {
        "label": "country_xpath",
        "kind": 5,
        "importPath": "selenium_practice.dropdown_with_dynamic_path_each_time_correct",
        "description": "selenium_practice.dropdown_with_dynamic_path_each_time_correct",
        "peekOfCode": "country_xpath = '//*[@id=\"select2-billing_country-results\"]/li'\n# Loop and click India\nfor i in range(249):  # Max 100 iterations just in case\n    countries = driver.find_elements(By.XPATH, country_xpath)\n    if i >= len(countries):\n        break\n    try:\n        if countries[i].text.strip().lower() == \"india\":\n            countries[i].click()\n            print(\"Clicked India.\")",
        "detail": "selenium_practice.dropdown_with_dynamic_path_each_time_correct",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.drop_down",
        "description": "selenium_practice.drop_down",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://rahulshettyacademy.com/AutomationPractice/\")\ndriver.maximize_window()#maximize browser window\ntime.sleep(4)\ndrpcountry_ele = driver.find_element(By.XPATH, '//*[@id=\"dropdown-class-example\"]')\ndrpcountry = Select(drpcountry_ele)\n#select element from drop down\ndrpcountry.select_by_visible_text('Option2')\n# drpcountry.select_by_value('Option3') #argentina",
        "detail": "selenium_practice.drop_down",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.drop_down",
        "description": "selenium_practice.drop_down",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://rahulshettyacademy.com/AutomationPractice/\")\ndriver.maximize_window()#maximize browser window\ntime.sleep(4)\ndrpcountry_ele = driver.find_element(By.XPATH, '//*[@id=\"dropdown-class-example\"]')\ndrpcountry = Select(drpcountry_ele)\n#select element from drop down\ndrpcountry.select_by_visible_text('Option2')\n# drpcountry.select_by_value('Option3') #argentina\n# drpcountry.select_by_index(13) #index not to be put in doub;le quotation",
        "detail": "selenium_practice.drop_down",
        "documentation": {}
    },
    {
        "label": "drpcountry_ele",
        "kind": 5,
        "importPath": "selenium_practice.drop_down",
        "description": "selenium_practice.drop_down",
        "peekOfCode": "drpcountry_ele = driver.find_element(By.XPATH, '//*[@id=\"dropdown-class-example\"]')\ndrpcountry = Select(drpcountry_ele)\n#select element from drop down\ndrpcountry.select_by_visible_text('Option2')\n# drpcountry.select_by_value('Option3') #argentina\n# drpcountry.select_by_index(13) #index not to be put in doub;le quotation\nalloptions = drpcountry.options\nprint(len(alloptions), \"are tital no of options\")\nfor opt in alloptions:\n    print(opt.text)",
        "detail": "selenium_practice.drop_down",
        "documentation": {}
    },
    {
        "label": "drpcountry",
        "kind": 5,
        "importPath": "selenium_practice.drop_down",
        "description": "selenium_practice.drop_down",
        "peekOfCode": "drpcountry = Select(drpcountry_ele)\n#select element from drop down\ndrpcountry.select_by_visible_text('Option2')\n# drpcountry.select_by_value('Option3') #argentina\n# drpcountry.select_by_index(13) #index not to be put in doub;le quotation\nalloptions = drpcountry.options\nprint(len(alloptions), \"are tital no of options\")\nfor opt in alloptions:\n    print(opt.text)\n#select option without using built in function",
        "detail": "selenium_practice.drop_down",
        "documentation": {}
    },
    {
        "label": "alloptions",
        "kind": 5,
        "importPath": "selenium_practice.drop_down",
        "description": "selenium_practice.drop_down",
        "peekOfCode": "alloptions = drpcountry.options\nprint(len(alloptions), \"are tital no of options\")\nfor opt in alloptions:\n    print(opt.text)\n#select option without using built in function\nfor opt in alloptions:\n    if opt.text == \"Option2\":\n        opt.click()\n        break",
        "detail": "selenium_practice.drop_down",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.explicit_wait",
        "description": "selenium_practice.explicit_wait",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\n# mywait = WebDriverWait(driver, 100) #explicit wait declaration\nmywait = WebDriverWait(driver, 10,poll_frequency= 2, ignored_exceptions=[NoSuchElementException,\n                                                       ElementNotVisibleException,\n                                                       ElementNotSelectableException,\n                                                       Exception])\ndriver.get(\"https://www.google.com/\")\ndriver.maximize_window()\nsearchbox = driver.find_element(By.NAME, 'q')",
        "detail": "selenium_practice.explicit_wait",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.explicit_wait",
        "description": "selenium_practice.explicit_wait",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\n# mywait = WebDriverWait(driver, 100) #explicit wait declaration\nmywait = WebDriverWait(driver, 10,poll_frequency= 2, ignored_exceptions=[NoSuchElementException,\n                                                       ElementNotVisibleException,\n                                                       ElementNotSelectableException,\n                                                       Exception])\ndriver.get(\"https://www.google.com/\")\ndriver.maximize_window()\nsearchbox = driver.find_element(By.NAME, 'q')\nsearchbox.send_keys(\"Selenium\")",
        "detail": "selenium_practice.explicit_wait",
        "documentation": {}
    },
    {
        "label": "mywait",
        "kind": 5,
        "importPath": "selenium_practice.explicit_wait",
        "description": "selenium_practice.explicit_wait",
        "peekOfCode": "mywait = WebDriverWait(driver, 10,poll_frequency= 2, ignored_exceptions=[NoSuchElementException,\n                                                       ElementNotVisibleException,\n                                                       ElementNotSelectableException,\n                                                       Exception])\ndriver.get(\"https://www.google.com/\")\ndriver.maximize_window()\nsearchbox = driver.find_element(By.NAME, 'q')\nsearchbox.send_keys(\"Selenium\")\nsearchbox.submit()\nsearchlink = mywait.until(ec1.presence_of_element_located((By.XPATH, '//h3[normalize-space()=\"Selenium\"]'))) ",
        "detail": "selenium_practice.explicit_wait",
        "documentation": {}
    },
    {
        "label": "searchbox",
        "kind": 5,
        "importPath": "selenium_practice.explicit_wait",
        "description": "selenium_practice.explicit_wait",
        "peekOfCode": "searchbox = driver.find_element(By.NAME, 'q')\nsearchbox.send_keys(\"Selenium\")\nsearchbox.submit()\nsearchlink = mywait.until(ec1.presence_of_element_located((By.XPATH, '//h3[normalize-space()=\"Selenium\"]'))) \nsearchlink.click()\ntime.sleep(4)\ndriver.quit()",
        "detail": "selenium_practice.explicit_wait",
        "documentation": {}
    },
    {
        "label": "searchlink",
        "kind": 5,
        "importPath": "selenium_practice.explicit_wait",
        "description": "selenium_practice.explicit_wait",
        "peekOfCode": "searchlink = mywait.until(ec1.presence_of_element_located((By.XPATH, '//h3[normalize-space()=\"Selenium\"]'))) \nsearchlink.click()\ntime.sleep(4)\ndriver.quit()",
        "detail": "selenium_practice.explicit_wait",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.find_element&find_elements",
        "description": "selenium_practice.find_element&find_elements",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()\n#####################  find element() return single webelement\n#1> locator matching with 1 web element\nelement = driver.find_element(By.XPATH, \"//input[@id = 'small-searchterms']\")\nelement.send_keys(\"apple macbook pro\")\n# element = driver.find_element(By.XPATH, \"//div[@class = 'footer']//a\").text\n######### find_elements  teturn multiple elements",
        "detail": "selenium_practice.find_element&find_elements",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.find_element&find_elements",
        "description": "selenium_practice.find_element&find_elements",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()\n#####################  find element() return single webelement\n#1> locator matching with 1 web element\nelement = driver.find_element(By.XPATH, \"//input[@id = 'small-searchterms']\")\nelement.send_keys(\"apple macbook pro\")\n# element = driver.find_element(By.XPATH, \"//div[@class = 'footer']//a\").text\n######### find_elements  teturn multiple elements\n# 1 locator matching 1 webelement",
        "detail": "selenium_practice.find_element&find_elements",
        "documentation": {}
    },
    {
        "label": "element",
        "kind": 5,
        "importPath": "selenium_practice.find_element&find_elements",
        "description": "selenium_practice.find_element&find_elements",
        "peekOfCode": "element = driver.find_element(By.XPATH, \"//input[@id = 'small-searchterms']\")\nelement.send_keys(\"apple macbook pro\")\n# element = driver.find_element(By.XPATH, \"//div[@class = 'footer']//a\").text\n######### find_elements  teturn multiple elements\n# 1 locator matching 1 webelement\n# element = driver.find_elements(By.XPATH, \"//input[@id = 'small-searchterms']\")\n# print(len(element)) \n# element[0].send_keys(\"apple macbook pro\")\n######### text vs get_attribute \n# text ---- return inner text of element of element",
        "detail": "selenium_practice.find_element&find_elements",
        "documentation": {}
    },
    {
        "label": "service",
        "kind": 5,
        "importPath": "selenium_practice.first_testcase",
        "description": "selenium_practice.first_testcase",
        "peekOfCode": "service = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=service)\n# Open site\ndriver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n# Optional wait for page to load\ntime.sleep(3)  # Or use WebDriverWait (recommended for dynamic pages)\n# Fill login form\ndriver.find_element(By.NAME, \"username\").send_keys(\"Admin\")\ndriver.find_element(By.NAME, \"password\").send_keys(\"admin123\")\ndriver.find_element(By.XPATH, '//button[normalize-space()=\"Login\"]').click()",
        "detail": "selenium_practice.first_testcase",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.first_testcase",
        "description": "selenium_practice.first_testcase",
        "peekOfCode": "driver = webdriver.Chrome(service=service)\n# Open site\ndriver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n# Optional wait for page to load\ntime.sleep(3)  # Or use WebDriverWait (recommended for dynamic pages)\n# Fill login form\ndriver.find_element(By.NAME, \"username\").send_keys(\"Admin\")\ndriver.find_element(By.NAME, \"password\").send_keys(\"admin123\")\ndriver.find_element(By.XPATH, '//button[normalize-space()=\"Login\"]').click()\nact_title = driver.title ",
        "detail": "selenium_practice.first_testcase",
        "documentation": {}
    },
    {
        "label": "act_title",
        "kind": 5,
        "importPath": "selenium_practice.first_testcase",
        "description": "selenium_practice.first_testcase",
        "peekOfCode": "act_title = driver.title \nexp_title = \"OrangeHRM\"\nif act_title == exp_title:\n    print(\"login test pass\")\nelse:\n    print(\"login test fail\")",
        "detail": "selenium_practice.first_testcase",
        "documentation": {}
    },
    {
        "label": "exp_title",
        "kind": 5,
        "importPath": "selenium_practice.first_testcase",
        "description": "selenium_practice.first_testcase",
        "peekOfCode": "exp_title = \"OrangeHRM\"\nif act_title == exp_title:\n    print(\"login test pass\")\nelse:\n    print(\"login test fail\")",
        "detail": "selenium_practice.first_testcase",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.framesprac1",
        "description": "selenium_practice.framesprac1",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://www.hyrtutorials.com/p/frames-practice.html\")\ndriver.maximize_window()#maximize browser window\ntime.sleep(4)\ntry:\n    driver.switch_to.frame(\"frm1\")\nexcept Exception:\n    print(f\"error orccur in switching i frame\")\n# d;river.find_element(By.LINK_TEXT, )",
        "detail": "selenium_practice.framesprac1",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.framesprac1",
        "description": "selenium_practice.framesprac1",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://www.hyrtutorials.com/p/frames-practice.html\")\ndriver.maximize_window()#maximize browser window\ntime.sleep(4)\ntry:\n    driver.switch_to.frame(\"frm1\")\nexcept Exception:\n    print(f\"error orccur in switching i frame\")\n# d;river.find_element(By.LINK_TEXT, )\ntry:",
        "detail": "selenium_practice.framesprac1",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.handlebrokenlinks",
        "description": "selenium_practice.handlebrokenlinks",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"http://www.deadlinkcity.com/\")\ndriver.maximize_window()#maximize browser window\nalllinks = driver.find_elements(By.TAG_NAME, 'a')\ncount = 0\nfor link in alllinks:\n    url = link.get_attribute('href')\n    try :\n        res = requests.head(url)",
        "detail": "selenium_practice.handlebrokenlinks",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.handlebrokenlinks",
        "description": "selenium_practice.handlebrokenlinks",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"http://www.deadlinkcity.com/\")\ndriver.maximize_window()#maximize browser window\nalllinks = driver.find_elements(By.TAG_NAME, 'a')\ncount = 0\nfor link in alllinks:\n    url = link.get_attribute('href')\n    try :\n        res = requests.head(url)\n    except:",
        "detail": "selenium_practice.handlebrokenlinks",
        "documentation": {}
    },
    {
        "label": "alllinks",
        "kind": 5,
        "importPath": "selenium_practice.handlebrokenlinks",
        "description": "selenium_practice.handlebrokenlinks",
        "peekOfCode": "alllinks = driver.find_elements(By.TAG_NAME, 'a')\ncount = 0\nfor link in alllinks:\n    url = link.get_attribute('href')\n    try :\n        res = requests.head(url)\n    except:\n        None\n    if res.status_code>= 400:\n        print(url, \"  is broken link\")",
        "detail": "selenium_practice.handlebrokenlinks",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "selenium_practice.handlebrokenlinks",
        "description": "selenium_practice.handlebrokenlinks",
        "peekOfCode": "count = 0\nfor link in alllinks:\n    url = link.get_attribute('href')\n    try :\n        res = requests.head(url)\n    except:\n        None\n    if res.status_code>= 400:\n        print(url, \"  is broken link\")\n        count+=1",
        "detail": "selenium_practice.handlebrokenlinks",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.handlebrowserwindow",
        "description": "selenium_practice.handlebrowserwindow",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\ndriver.maximize_window()#maximize browser window\n# time.sleep(3)\nmywait = WebDriverWait(driver, 15, poll_frequency=1, ignored_exceptions= [NoSuchElementException])\n# windowid = driver.current_window_handle\n# print(\"windowid is\",  windowid)  #12DD75124652DC0E142B108A4E3B7B2F                        \n#                                 #1D2A618540EDF6EAB58B5B8DC48EE7EF\nsel = mywait.until(ec1.presence_of_element_located((By.LINK_TEXT, 'OrangeHRM, Inc')))",
        "detail": "selenium_practice.handlebrowserwindow",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.handlebrowserwindow",
        "description": "selenium_practice.handlebrowserwindow",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\ndriver.maximize_window()#maximize browser window\n# time.sleep(3)\nmywait = WebDriverWait(driver, 15, poll_frequency=1, ignored_exceptions= [NoSuchElementException])\n# windowid = driver.current_window_handle\n# print(\"windowid is\",  windowid)  #12DD75124652DC0E142B108A4E3B7B2F                        \n#                                 #1D2A618540EDF6EAB58B5B8DC48EE7EF\nsel = mywait.until(ec1.presence_of_element_located((By.LINK_TEXT, 'OrangeHRM, Inc')))\nsel.click()",
        "detail": "selenium_practice.handlebrowserwindow",
        "documentation": {}
    },
    {
        "label": "mywait",
        "kind": 5,
        "importPath": "selenium_practice.handlebrowserwindow",
        "description": "selenium_practice.handlebrowserwindow",
        "peekOfCode": "mywait = WebDriverWait(driver, 15, poll_frequency=1, ignored_exceptions= [NoSuchElementException])\n# windowid = driver.current_window_handle\n# print(\"windowid is\",  windowid)  #12DD75124652DC0E142B108A4E3B7B2F                        \n#                                 #1D2A618540EDF6EAB58B5B8DC48EE7EF\nsel = mywait.until(ec1.presence_of_element_located((By.LINK_TEXT, 'OrangeHRM, Inc')))\nsel.click()\nwindow_ids = driver.window_handles\n# for i in window_ids:\nprint(\"parent id\",window_ids[0])\nprint(\"child id\",window_ids[1])",
        "detail": "selenium_practice.handlebrowserwindow",
        "documentation": {}
    },
    {
        "label": "sel",
        "kind": 5,
        "importPath": "selenium_practice.handlebrowserwindow",
        "description": "selenium_practice.handlebrowserwindow",
        "peekOfCode": "sel = mywait.until(ec1.presence_of_element_located((By.LINK_TEXT, 'OrangeHRM, Inc')))\nsel.click()\nwindow_ids = driver.window_handles\n# for i in window_ids:\nprint(\"parent id\",window_ids[0])\nprint(\"child id\",window_ids[1])\ntime.sleep(90)\n# driver.close()\n# driver.switch_to(windowID)\n# chat gpt code below ",
        "detail": "selenium_practice.handlebrowserwindow",
        "documentation": {}
    },
    {
        "label": "window_ids",
        "kind": 5,
        "importPath": "selenium_practice.handlebrowserwindow",
        "description": "selenium_practice.handlebrowserwindow",
        "peekOfCode": "window_ids = driver.window_handles\n# for i in window_ids:\nprint(\"parent id\",window_ids[0])\nprint(\"child id\",window_ids[1])\ntime.sleep(90)\n# driver.close()\n# driver.switch_to(windowID)\n# chat gpt code below \n# from selenium import webdriver\n# from selenium.webdriver.chrome.service import Service",
        "detail": "selenium_practice.handlebrowserwindow",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.handlelinks",
        "description": "selenium_practice.handlelinks",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()#maximize browser window\nlinks = driver.find_elements(By.TAG_NAME, 'a')\nprint('total number of links', len(links))\nfor link in links :\n    print (link.text)\n    print(link.get_attribute('value'))",
        "detail": "selenium_practice.handlelinks",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.handlelinks",
        "description": "selenium_practice.handlelinks",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()#maximize browser window\nlinks = driver.find_elements(By.TAG_NAME, 'a')\nprint('total number of links', len(links))\nfor link in links :\n    print (link.text)\n    print(link.get_attribute('value'))",
        "detail": "selenium_practice.handlelinks",
        "documentation": {}
    },
    {
        "label": "links",
        "kind": 5,
        "importPath": "selenium_practice.handlelinks",
        "description": "selenium_practice.handlelinks",
        "peekOfCode": "links = driver.find_elements(By.TAG_NAME, 'a')\nprint('total number of links', len(links))\nfor link in links :\n    print (link.text)\n    print(link.get_attribute('value'))",
        "detail": "selenium_practice.handlelinks",
        "documentation": {}
    },
    {
        "label": "headlessMode",
        "kind": 2,
        "importPath": "selenium_practice.headless_mode",
        "description": "selenium_practice.headless_mode",
        "peekOfCode": "def headlessMode():\n    from selenium.webdriver.chrome.service import Service\n    serv_obj = Service(r'C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe')\n    ops = webdriver.ChromeOptions()\n    # ops.headless = True\n    driver = webdriver.Chrome(service=serv_obj, options= ops )\n    return driver \ndriver = headlessMode()\ndriver.get('https://demo.nopcommerce.com/')\n# driver.maximize_window()",
        "detail": "selenium_practice.headless_mode",
        "documentation": {}
    },
    {
        "label": "loc",
        "kind": 5,
        "importPath": "selenium_practice.headless_mode",
        "description": "selenium_practice.headless_mode",
        "peekOfCode": "loc = os.getcwd()\ndef headlessMode():\n    from selenium.webdriver.chrome.service import Service\n    serv_obj = Service(r'C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe')\n    ops = webdriver.ChromeOptions()\n    # ops.headless = True\n    driver = webdriver.Chrome(service=serv_obj, options= ops )\n    return driver \ndriver = headlessMode()\ndriver.get('https://demo.nopcommerce.com/')",
        "detail": "selenium_practice.headless_mode",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.headless_mode",
        "description": "selenium_practice.headless_mode",
        "peekOfCode": "driver = headlessMode()\ndriver.get('https://demo.nopcommerce.com/')\n# driver.maximize_window()\nprint(driver.title)\nprint(driver.current_url)",
        "detail": "selenium_practice.headless_mode",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.implicit_wait",
        "description": "selenium_practice.implicit_wait",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\n###########################################################################\ndriver.implicitly_wait(10) # seconds it is applicablt for all following statements\n########################################################################\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()\n#####################  find element() return single webelement\n#1> locator matching with 1 web element\nelement = driver.find_element(By.XPATH, \"//input[@id = 'small-searchterms']\")",
        "detail": "selenium_practice.implicit_wait",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.implicit_wait",
        "description": "selenium_practice.implicit_wait",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\n###########################################################################\ndriver.implicitly_wait(10) # seconds it is applicablt for all following statements\n########################################################################\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()\n#####################  find element() return single webelement\n#1> locator matching with 1 web element\nelement = driver.find_element(By.XPATH, \"//input[@id = 'small-searchterms']\")\nelement.send_keys(\"apple macbook pro\")",
        "detail": "selenium_practice.implicit_wait",
        "documentation": {}
    },
    {
        "label": "element",
        "kind": 5,
        "importPath": "selenium_practice.implicit_wait",
        "description": "selenium_practice.implicit_wait",
        "peekOfCode": "element = driver.find_element(By.XPATH, \"//input[@id = 'small-searchterms']\")\nelement.send_keys(\"apple macbook pro\")\n# element = driver.find_element(By.XPATH, \"//div[@class = 'footer']//a\").text\n######### find_elements  teturn multiple elements\n# 1 locator matching 1 webelement\n# element = driver.find_elements(By.XPATH, \"//input[@id = 'small-searchterms']\")\n# print(len(element)) \n# element[0].send_keys(\"apple macbook pro\")\n######### text vs get_attribute \n# text ---- return inner text of element of element",
        "detail": "selenium_practice.implicit_wait",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.locator4xpath",
        "description": "selenium_practice.locator4xpath",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://money.rediff.com/gainers/bse/daily/groupall\")\ndriver.maximize_window()\n#self\n# text_element = driver.find_element(By.XPATH, '//a[normalize-space()=\"Peninsula Land L\"]/self::a').text\n# print(text_element)\n#parent\n# text_element = driver.find_element(By.XPATH, '//a[normalize-space()=\"Peninsula Land L\"]/parent::td').text\n# print(text_element)",
        "detail": "selenium_practice.locator4xpath",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.locator4xpath",
        "description": "selenium_practice.locator4xpath",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://money.rediff.com/gainers/bse/daily/groupall\")\ndriver.maximize_window()\n#self\n# text_element = driver.find_element(By.XPATH, '//a[normalize-space()=\"Peninsula Land L\"]/self::a').text\n# print(text_element)\n#parent\n# text_element = driver.find_element(By.XPATH, '//a[normalize-space()=\"Peninsula Land L\"]/parent::td').text\n# print(text_element)\n# #child emlement",
        "detail": "selenium_practice.locator4xpath",
        "documentation": {}
    },
    {
        "label": "text_element",
        "kind": 5,
        "importPath": "selenium_practice.locator4xpath",
        "description": "selenium_practice.locator4xpath",
        "peekOfCode": "text_element = driver.find_elements(By.XPATH, '//a[normalize-space()=\"Peninsula Land L\"]/ancestor::tr/preceding::*')\nprint('number of presceding siblings are ',len(text_element))",
        "detail": "selenium_practice.locator4xpath",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.locators1",
        "description": "selenium_practice.locators1",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()#maximize browser window\ndriver.find_element(By.ID, \"small-searchterms\").send_keys(\"Lenovo Thinkpad X1 Carbon Laptop\")\ndriver.find_element(By.LINK_TEXT, \"Register\").click()\nsliders = driver.find_elements(By.TAG_NAME, \"a\")\nprint(len(sliders))\ntime.sleep(2)\n#linktext and partial link text",
        "detail": "selenium_practice.locators1",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.locators1",
        "description": "selenium_practice.locators1",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.maximize_window()#maximize browser window\ndriver.find_element(By.ID, \"small-searchterms\").send_keys(\"Lenovo Thinkpad X1 Carbon Laptop\")\ndriver.find_element(By.LINK_TEXT, \"Register\").click()\nsliders = driver.find_elements(By.TAG_NAME, \"a\")\nprint(len(sliders))\ntime.sleep(2)\n#linktext and partial link text\n# driver.find_element(By.LINK_TEXT, )",
        "detail": "selenium_practice.locators1",
        "documentation": {}
    },
    {
        "label": "sliders",
        "kind": 5,
        "importPath": "selenium_practice.locators1",
        "description": "selenium_practice.locators1",
        "peekOfCode": "sliders = driver.find_elements(By.TAG_NAME, \"a\")\nprint(len(sliders))\ntime.sleep(2)\n#linktext and partial link text\n# driver.find_element(By.LINK_TEXT, )",
        "detail": "selenium_practice.locators1",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.locators2",
        "description": "selenium_practice.locators2",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://www.automationexercise.com/\")\ndriver.maximize_window()#maximize browser window\nslider = driver.find_elements(By.CLASS_NAME, \"col-sm-6\")\nprint(len(slider))\nlinks = driver.find_elements(By.TAG_NAME, \"a\")\nprint(len(links))",
        "detail": "selenium_practice.locators2",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.locators2",
        "description": "selenium_practice.locators2",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://www.automationexercise.com/\")\ndriver.maximize_window()#maximize browser window\nslider = driver.find_elements(By.CLASS_NAME, \"col-sm-6\")\nprint(len(slider))\nlinks = driver.find_elements(By.TAG_NAME, \"a\")\nprint(len(links))",
        "detail": "selenium_practice.locators2",
        "documentation": {}
    },
    {
        "label": "slider",
        "kind": 5,
        "importPath": "selenium_practice.locators2",
        "description": "selenium_practice.locators2",
        "peekOfCode": "slider = driver.find_elements(By.CLASS_NAME, \"col-sm-6\")\nprint(len(slider))\nlinks = driver.find_elements(By.TAG_NAME, \"a\")\nprint(len(links))",
        "detail": "selenium_practice.locators2",
        "documentation": {}
    },
    {
        "label": "links",
        "kind": 5,
        "importPath": "selenium_practice.locators2",
        "description": "selenium_practice.locators2",
        "peekOfCode": "links = driver.find_elements(By.TAG_NAME, \"a\")\nprint(len(links))",
        "detail": "selenium_practice.locators2",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.locators3",
        "description": "selenium_practice.locators3",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://www.facebook.com/\")\ndriver.maximize_window()#maximize browser window\n# # tag and id\n# #    tagname#value of id\n# driver.find_element(By.CSS_SELECTOR, \"input#email\").send_keys('abc')\n# #   tag and class \n# #    tagname.value of class \n# # input.inputtext_",
        "detail": "selenium_practice.locators3",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.locators3",
        "description": "selenium_practice.locators3",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://www.facebook.com/\")\ndriver.maximize_window()#maximize browser window\n# # tag and id\n# #    tagname#value of id\n# driver.find_element(By.CSS_SELECTOR, \"input#email\").send_keys('abc')\n# #   tag and class \n# #    tagname.value of class \n# # input.inputtext_\n# driver.find_element(By.CSS_SELECTOR, \"input.inputtext\").send_keys('abc')",
        "detail": "selenium_practice.locators3",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "selenium_practice.multithreaded_example",
        "description": "selenium_practice.multithreaded_example",
        "peekOfCode": "def run_test(thread_id, url):\n    driver = webdriver.Chrome()\n    driver.get(url)\n    print(f\"[Thread {thread_id}] Title: {driver.title}\")\n    time.sleep(2)  # simulate test steps\n    driver.quit()\n# List of URLs to test\nurls = [\"https://example.com\", \"https://google.com\", \"https://github.com\"]\nthreads = []\n# Launch a thread per URL",
        "detail": "selenium_practice.multithreaded_example",
        "documentation": {}
    },
    {
        "label": "urls",
        "kind": 5,
        "importPath": "selenium_practice.multithreaded_example",
        "description": "selenium_practice.multithreaded_example",
        "peekOfCode": "urls = [\"https://example.com\", \"https://google.com\", \"https://github.com\"]\nthreads = []\n# Launch a thread per URL\nfor i, url in enumerate(urls):\n    t = threading.Thread(target=run_test, args=(i + 1, url))\n    threads.append(t)\n    t.start()\n# Wait for all threads to finish\nfor t in threads:\n    t.join()",
        "detail": "selenium_practice.multithreaded_example",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "selenium_practice.multithreaded_example",
        "description": "selenium_practice.multithreaded_example",
        "peekOfCode": "threads = []\n# Launch a thread per URL\nfor i, url in enumerate(urls):\n    t = threading.Thread(target=run_test, args=(i + 1, url))\n    threads.append(t)\n    t.start()\n# Wait for all threads to finish\nfor t in threads:\n    t.join()\nprint(\"✅ All tests completed.\")",
        "detail": "selenium_practice.multithreaded_example",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.navigational_command",
        "description": "selenium_practice.navigational_command",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.get(\"https://www.amazon.in/\")\ndriver.maximize_window()\ndriver.back()\ndriver.forward()\ndriver.refresh()\ndriver.quit()",
        "detail": "selenium_practice.navigational_command",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.navigational_command",
        "description": "selenium_practice.navigational_command",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.nopcommerce.com/\")\ndriver.get(\"https://www.amazon.in/\")\ndriver.maximize_window()\ndriver.back()\ndriver.forward()\ndriver.refresh()\ndriver.quit()",
        "detail": "selenium_practice.navigational_command",
        "documentation": {}
    },
    {
        "label": "ops",
        "kind": 5,
        "importPath": "selenium_practice.notificationpopup",
        "description": "selenium_practice.notificationpopup",
        "peekOfCode": "ops = webdriver.ChromeOptions()\nops.add_argument(\"--disable-notifications\")\nserv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj, options= ops)\ndriver.get('https://whatmylocation.com/#google_vignette')\ndriver.maximize_window()\ntime.sleep(40)",
        "detail": "selenium_practice.notificationpopup",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.notificationpopup",
        "description": "selenium_practice.notificationpopup",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj, options= ops)\ndriver.get('https://whatmylocation.com/#google_vignette')\ndriver.maximize_window()\ntime.sleep(40)",
        "detail": "selenium_practice.notificationpopup",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.notificationpopup",
        "description": "selenium_practice.notificationpopup",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj, options= ops)\ndriver.get('https://whatmylocation.com/#google_vignette')\ndriver.maximize_window()\ntime.sleep(40)",
        "detail": "selenium_practice.notificationpopup",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.popupsOrAlerts",
        "description": "selenium_practice.popupsOrAlerts",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://the-internet.herokuapp.com/javascript_alerts\")\ndriver.maximize_window()#maximize browser window\ndriver.find_element(By.XPATH, '//*[@id=\"content\"]/div/ul/li[3]/button').click()\nalertwindow = driver.switch_to.alert\nprint(alertwindow.text)\nalertwindow.send_keys('hola its sent by me')\n# alertwindow.accept()\nalertwindow.dismiss()",
        "detail": "selenium_practice.popupsOrAlerts",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.popupsOrAlerts",
        "description": "selenium_practice.popupsOrAlerts",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://the-internet.herokuapp.com/javascript_alerts\")\ndriver.maximize_window()#maximize browser window\ndriver.find_element(By.XPATH, '//*[@id=\"content\"]/div/ul/li[3]/button').click()\nalertwindow = driver.switch_to.alert\nprint(alertwindow.text)\nalertwindow.send_keys('hola its sent by me')\n# alertwindow.accept()\nalertwindow.dismiss()\ntime.sleep(4)",
        "detail": "selenium_practice.popupsOrAlerts",
        "documentation": {}
    },
    {
        "label": "alertwindow",
        "kind": 5,
        "importPath": "selenium_practice.popupsOrAlerts",
        "description": "selenium_practice.popupsOrAlerts",
        "peekOfCode": "alertwindow = driver.switch_to.alert\nprint(alertwindow.text)\nalertwindow.send_keys('hola its sent by me')\n# alertwindow.accept()\nalertwindow.dismiss()\ntime.sleep(4)",
        "detail": "selenium_practice.popupsOrAlerts",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "selenium_practice.read_exelfile",
        "description": "selenium_practice.read_exelfile",
        "peekOfCode": "file = r\"C:\\Users\\91878\\python_tutotial\\selenium_practice\\data.xlsx\"\nworkbook = openpyxl.load_workbook(file)\nsheet = workbook['Sheet1']      # or we can use workbook.active for just 1 sheet in workbook\nrows = sheet.max_row\ncols = sheet.max_column\nfor r in range(1,rows+1):\n    print(\"  \")\n    for c in range(1, cols+1):\n        print(sheet.cell(r,c).value,end='  ')",
        "detail": "selenium_practice.read_exelfile",
        "documentation": {}
    },
    {
        "label": "workbook",
        "kind": 5,
        "importPath": "selenium_practice.read_exelfile",
        "description": "selenium_practice.read_exelfile",
        "peekOfCode": "workbook = openpyxl.load_workbook(file)\nsheet = workbook['Sheet1']      # or we can use workbook.active for just 1 sheet in workbook\nrows = sheet.max_row\ncols = sheet.max_column\nfor r in range(1,rows+1):\n    print(\"  \")\n    for c in range(1, cols+1):\n        print(sheet.cell(r,c).value,end='  ')",
        "detail": "selenium_practice.read_exelfile",
        "documentation": {}
    },
    {
        "label": "sheet",
        "kind": 5,
        "importPath": "selenium_practice.read_exelfile",
        "description": "selenium_practice.read_exelfile",
        "peekOfCode": "sheet = workbook['Sheet1']      # or we can use workbook.active for just 1 sheet in workbook\nrows = sheet.max_row\ncols = sheet.max_column\nfor r in range(1,rows+1):\n    print(\"  \")\n    for c in range(1, cols+1):\n        print(sheet.cell(r,c).value,end='  ')",
        "detail": "selenium_practice.read_exelfile",
        "documentation": {}
    },
    {
        "label": "rows",
        "kind": 5,
        "importPath": "selenium_practice.read_exelfile",
        "description": "selenium_practice.read_exelfile",
        "peekOfCode": "rows = sheet.max_row\ncols = sheet.max_column\nfor r in range(1,rows+1):\n    print(\"  \")\n    for c in range(1, cols+1):\n        print(sheet.cell(r,c).value,end='  ')",
        "detail": "selenium_practice.read_exelfile",
        "documentation": {}
    },
    {
        "label": "cols",
        "kind": 5,
        "importPath": "selenium_practice.read_exelfile",
        "description": "selenium_practice.read_exelfile",
        "peekOfCode": "cols = sheet.max_column\nfor r in range(1,rows+1):\n    print(\"  \")\n    for c in range(1, cols+1):\n        print(sheet.cell(r,c).value,end='  ')",
        "detail": "selenium_practice.read_exelfile",
        "documentation": {}
    },
    {
        "label": "loc",
        "kind": 5,
        "importPath": "selenium_practice.save_screenshot",
        "description": "selenium_practice.save_screenshot",
        "peekOfCode": "loc = os.getcwd()\nfrom selenium.webdriver.chrome.service import Service\nserv_obj = Service(r'C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe')\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://demo.nopcommerce.com/')\ndriver.maximize_window()\n# implicitwait(10)\ndriver.save_screenshot(loc + \"\\\\selenium_practice\\\\homepage.png\")\n# driver.get_screenshot_as_base64(loc, \"\\\\selenium_practice\\\\homepage.png\")\n# driver.get_screenshot_as_file(loc, \"\\\\selenium_practice\\\\homepage.png\")",
        "detail": "selenium_practice.save_screenshot",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.save_screenshot",
        "description": "selenium_practice.save_screenshot",
        "peekOfCode": "serv_obj = Service(r'C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe')\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://demo.nopcommerce.com/')\ndriver.maximize_window()\n# implicitwait(10)\ndriver.save_screenshot(loc + \"\\\\selenium_practice\\\\homepage.png\")\n# driver.get_screenshot_as_base64(loc, \"\\\\selenium_practice\\\\homepage.png\")\n# driver.get_screenshot_as_file(loc, \"\\\\selenium_practice\\\\homepage.png\")\n# driver.find_element(By.XPATH, '//a[normalize-space()=\"Register\"]').send_keys(Keys.CONTROL+Keys.RETURN)\nfor i in range(100):",
        "detail": "selenium_practice.save_screenshot",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.save_screenshot",
        "description": "selenium_practice.save_screenshot",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://demo.nopcommerce.com/')\ndriver.maximize_window()\n# implicitwait(10)\ndriver.save_screenshot(loc + \"\\\\selenium_practice\\\\homepage.png\")\n# driver.get_screenshot_as_base64(loc, \"\\\\selenium_practice\\\\homepage.png\")\n# driver.get_screenshot_as_file(loc, \"\\\\selenium_practice\\\\homepage.png\")\n# driver.find_element(By.XPATH, '//a[normalize-space()=\"Register\"]').send_keys(Keys.CONTROL+Keys.RETURN)\nfor i in range(100):\n    driver.switch_to.new_window('window')",
        "detail": "selenium_practice.save_screenshot",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.scroll_function1",
        "description": "selenium_practice.scroll_function1",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://www.countries-ofthe-world.com/flags-of-the-world.html')\ndriver.maximize_window()\ntime.sleep(3)\n#  scroll by pixel\n# driver.execute_script(\"window.scrollBy(0,3000)\",'')\n# print('yofset is ',end=' ')\n# value = driver.execute_script('return window.pageYOffset;')\n# print(value )",
        "detail": "selenium_practice.scroll_function1",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.scroll_function1",
        "description": "selenium_practice.scroll_function1",
        "peekOfCode": "driver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://www.countries-ofthe-world.com/flags-of-the-world.html')\ndriver.maximize_window()\ntime.sleep(3)\n#  scroll by pixel\n# driver.execute_script(\"window.scrollBy(0,3000)\",'')\n# print('yofset is ',end=' ')\n# value = driver.execute_script('return window.pageYOffset;')\n# print(value )\n# scroll untill u find an element ",
        "detail": "selenium_practice.scroll_function1",
        "documentation": {}
    },
    {
        "label": "flag",
        "kind": 5,
        "importPath": "selenium_practice.scroll_function1",
        "description": "selenium_practice.scroll_function1",
        "peekOfCode": "flag = driver.find_element(By.XPATH, '//img[@alt=\"Flag of India\"]')\ndriver.execute_script('arguments[0].scrollIntoView();',flag)\nvalue = driver.execute_script('return window.pageYOffset;')\nprint(\"wekfnoewfbow  ratqatatatattatatat :\",value )\ndriver.execute_script('window.scrollBy(0,document.body.scrollHeight)')\ntime.sleep(5)",
        "detail": "selenium_practice.scroll_function1",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "selenium_practice.scroll_function1",
        "description": "selenium_practice.scroll_function1",
        "peekOfCode": "value = driver.execute_script('return window.pageYOffset;')\nprint(\"wekfnoewfbow  ratqatatatattatatat :\",value )\ndriver.execute_script('window.scrollBy(0,document.body.scrollHeight)')\ntime.sleep(5)",
        "detail": "selenium_practice.scroll_function1",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.selectdate_havingoptions",
        "description": "selenium_practice.selectdate_havingoptions",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\n#  count number of rows in a web table\ndriver.get('https://www.dummyticket.com/dummy-ticket-for-visa-application/')\ndriver.maximize_window()\ntime.sleep(4)\ndriver.find_element(By.XPATH, '//input[@id=\"dob\"]').click()\na = 'Aug'\nb = '2022'\nc = '13'",
        "detail": "selenium_practice.selectdate_havingoptions",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.selectdate_havingoptions",
        "description": "selenium_practice.selectdate_havingoptions",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\n#  count number of rows in a web table\ndriver.get('https://www.dummyticket.com/dummy-ticket-for-visa-application/')\ndriver.maximize_window()\ntime.sleep(4)\ndriver.find_element(By.XPATH, '//input[@id=\"dob\"]').click()\na = 'Aug'\nb = '2022'\nc = '13'\nmonth_pick = Select(driver.find_element(By.XPATH, '//select[@aria-label=\"Select month\"]'))",
        "detail": "selenium_practice.selectdate_havingoptions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "selenium_practice.selectdate_havingoptions",
        "description": "selenium_practice.selectdate_havingoptions",
        "peekOfCode": "a = 'Aug'\nb = '2022'\nc = '13'\nmonth_pick = Select(driver.find_element(By.XPATH, '//select[@aria-label=\"Select month\"]'))\nmonth_pick.select_by_visible_text(a)\nyear_pick = Select(driver.find_element(By.XPATH, '//select[@aria-label=\"Select year\"]'))\nyear_pick.select_by_visible_text(b)\ndate_pick = driver.find_elements(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/table/tbody/tr/td/a')\nfor date in date_pick:\n    if date.text == '13':",
        "detail": "selenium_practice.selectdate_havingoptions",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "selenium_practice.selectdate_havingoptions",
        "description": "selenium_practice.selectdate_havingoptions",
        "peekOfCode": "b = '2022'\nc = '13'\nmonth_pick = Select(driver.find_element(By.XPATH, '//select[@aria-label=\"Select month\"]'))\nmonth_pick.select_by_visible_text(a)\nyear_pick = Select(driver.find_element(By.XPATH, '//select[@aria-label=\"Select year\"]'))\nyear_pick.select_by_visible_text(b)\ndate_pick = driver.find_elements(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/table/tbody/tr/td/a')\nfor date in date_pick:\n    if date.text == '13':\n        date.click()",
        "detail": "selenium_practice.selectdate_havingoptions",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "selenium_practice.selectdate_havingoptions",
        "description": "selenium_practice.selectdate_havingoptions",
        "peekOfCode": "c = '13'\nmonth_pick = Select(driver.find_element(By.XPATH, '//select[@aria-label=\"Select month\"]'))\nmonth_pick.select_by_visible_text(a)\nyear_pick = Select(driver.find_element(By.XPATH, '//select[@aria-label=\"Select year\"]'))\nyear_pick.select_by_visible_text(b)\ndate_pick = driver.find_elements(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/table/tbody/tr/td/a')\nfor date in date_pick:\n    if date.text == '13':\n        date.click()\ntime.sleep(8)",
        "detail": "selenium_practice.selectdate_havingoptions",
        "documentation": {}
    },
    {
        "label": "month_pick",
        "kind": 5,
        "importPath": "selenium_practice.selectdate_havingoptions",
        "description": "selenium_practice.selectdate_havingoptions",
        "peekOfCode": "month_pick = Select(driver.find_element(By.XPATH, '//select[@aria-label=\"Select month\"]'))\nmonth_pick.select_by_visible_text(a)\nyear_pick = Select(driver.find_element(By.XPATH, '//select[@aria-label=\"Select year\"]'))\nyear_pick.select_by_visible_text(b)\ndate_pick = driver.find_elements(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/table/tbody/tr/td/a')\nfor date in date_pick:\n    if date.text == '13':\n        date.click()\ntime.sleep(8)",
        "detail": "selenium_practice.selectdate_havingoptions",
        "documentation": {}
    },
    {
        "label": "year_pick",
        "kind": 5,
        "importPath": "selenium_practice.selectdate_havingoptions",
        "description": "selenium_practice.selectdate_havingoptions",
        "peekOfCode": "year_pick = Select(driver.find_element(By.XPATH, '//select[@aria-label=\"Select year\"]'))\nyear_pick.select_by_visible_text(b)\ndate_pick = driver.find_elements(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/table/tbody/tr/td/a')\nfor date in date_pick:\n    if date.text == '13':\n        date.click()\ntime.sleep(8)",
        "detail": "selenium_practice.selectdate_havingoptions",
        "documentation": {}
    },
    {
        "label": "date_pick",
        "kind": 5,
        "importPath": "selenium_practice.selectdate_havingoptions",
        "description": "selenium_practice.selectdate_havingoptions",
        "peekOfCode": "date_pick = driver.find_elements(By.XPATH, '//*[@id=\"ui-datepicker-div\"]/table/tbody/tr/td/a')\nfor date in date_pick:\n    if date.text == '13':\n        date.click()\ntime.sleep(8)",
        "detail": "selenium_practice.selectdate_havingoptions",
        "documentation": {}
    },
    {
        "label": "bihar_auto",
        "kind": 2,
        "importPath": "selenium_practice.shloka_bihar_script",
        "description": "selenium_practice.shloka_bihar_script",
        "peekOfCode": "def bihar_auto(district,anchal,mauja,halka,khata_number,jamabandi_sankhya,fname,lname,user_id,u_date,epp_user_id,bhag_vartman,pusht_sankhya_number):\n    try:\n        pa_th = os.path.join(script_dir, u_date+'_'+'bihar'+'_'+'0', fname+'_'+lname+'_'+str(user_id))\n        os.makedirs(pa_th, exist_ok=True)    \n        #Set up driver\n        driver = webdriver.Chrome()\n        driver.get('https://parimarjan.bihar.gov.in/BiharBhumiReport/ViewJamabandi')\n        logger.info(\"DRIVER OPEN\")\n        time.sleep(1)\n        pid = driver.service.process.pid",
        "detail": "selenium_practice.shloka_bihar_script",
        "documentation": {}
    },
    {
        "label": "bihar_extraction",
        "kind": 2,
        "importPath": "selenium_practice.shloka_bihar_script",
        "description": "selenium_practice.shloka_bihar_script",
        "peekOfCode": "def bihar_extraction(district,anchal,mauja,halka,khata_number,jamabandi_sankhya,fname,lname,user_id,u_date,epp_user_id,driver,pid,wait,bhag_vartman,pusht_sankhya_number):\n    try:\n        logger.info(f\"Khata Number--{khata_number},Bhag Vartman--{bhag_vartman},Pusht_sankhya---{pusht_sankhya_number}\")\n        time.sleep(4)\n        no_data = ''\n        try:\n            WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.XPATH, '//*[@id=\"MainContent_Updatepanel1\"]/div/div/div[2]/div[6]')))\n            no_data = driver.find_element(By.XPATH, '//*[@id=\"MainContent_Updatepanel1\"]/div/div/div[2]/div[6]').text.strip()\n            logger.info(f'Extracted no_data text: \"{no_data}\"')  # Debugging line\n        except Exception as e:",
        "detail": "selenium_practice.shloka_bihar_script",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.slider_element",
        "description": "selenium_practice.slider_element",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://www.jqueryscript.net/demo/Price-Range-Slider-jQuery-UI/')\ndriver.maximize_window()\ntime.sleep(3)\nmin = driver.find_element(By.XPATH, '//*[@id=\"slider-range\"]/span[1]')\nmax = driver.find_element(By.XPATH, '//*[@id=\"slider-range\"]/span[2]')\nprint(\"location before moving\")\nprint(min.location)\nprint(max.location)",
        "detail": "selenium_practice.slider_element",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.slider_element",
        "description": "selenium_practice.slider_element",
        "peekOfCode": "driver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://www.jqueryscript.net/demo/Price-Range-Slider-jQuery-UI/')\ndriver.maximize_window()\ntime.sleep(3)\nmin = driver.find_element(By.XPATH, '//*[@id=\"slider-range\"]/span[1]')\nmax = driver.find_element(By.XPATH, '//*[@id=\"slider-range\"]/span[2]')\nprint(\"location before moving\")\nprint(min.location)\nprint(max.location)\nact = ActionChains(driver)",
        "detail": "selenium_practice.slider_element",
        "documentation": {}
    },
    {
        "label": "min",
        "kind": 5,
        "importPath": "selenium_practice.slider_element",
        "description": "selenium_practice.slider_element",
        "peekOfCode": "min = driver.find_element(By.XPATH, '//*[@id=\"slider-range\"]/span[1]')\nmax = driver.find_element(By.XPATH, '//*[@id=\"slider-range\"]/span[2]')\nprint(\"location before moving\")\nprint(min.location)\nprint(max.location)\nact = ActionChains(driver)\nact.drag_and_drop_by_offset(min, 100,0).perform()\nact.drag_and_drop_by_offset(max, -39,0).perform()\nprint(\"location after moving\")\nprint(min.location)",
        "detail": "selenium_practice.slider_element",
        "documentation": {}
    },
    {
        "label": "max",
        "kind": 5,
        "importPath": "selenium_practice.slider_element",
        "description": "selenium_practice.slider_element",
        "peekOfCode": "max = driver.find_element(By.XPATH, '//*[@id=\"slider-range\"]/span[2]')\nprint(\"location before moving\")\nprint(min.location)\nprint(max.location)\nact = ActionChains(driver)\nact.drag_and_drop_by_offset(min, 100,0).perform()\nact.drag_and_drop_by_offset(max, -39,0).perform()\nprint(\"location after moving\")\nprint(min.location)\nprint(max.location)",
        "detail": "selenium_practice.slider_element",
        "documentation": {}
    },
    {
        "label": "act",
        "kind": 5,
        "importPath": "selenium_practice.slider_element",
        "description": "selenium_practice.slider_element",
        "peekOfCode": "act = ActionChains(driver)\nact.drag_and_drop_by_offset(min, 100,0).perform()\nact.drag_and_drop_by_offset(max, -39,0).perform()\nprint(\"location after moving\")\nprint(min.location)\nprint(max.location)",
        "detail": "selenium_practice.slider_element",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.switch_frame_nested",
        "description": "selenium_practice.switch_frame_nested",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.automationtesting.in/Frames.html\")\ndriver.maximize_window()#maximize browser window\ndriver.find_element(By.XPATH, \"//a[normalize-space()='Iframe with in an Iframe']\").click()\nouterframe = driver.find_element(By.XPATH, '//*[@id=\"Multiple\"]/iframe ')\ndriver.switch_to.frame(outerframe)\ninnerframe = driver.find_element(By.XPATH, \"/html/body/section/div/div/iframe\")\ndriver.switch_to.frame(innerframe)\ndriver.find_element(By.XPATH, \"/html/body/section/div/div/div/input\").send_keys('welcome')",
        "detail": "selenium_practice.switch_frame_nested",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.switch_frame_nested",
        "description": "selenium_practice.switch_frame_nested",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://demo.automationtesting.in/Frames.html\")\ndriver.maximize_window()#maximize browser window\ndriver.find_element(By.XPATH, \"//a[normalize-space()='Iframe with in an Iframe']\").click()\nouterframe = driver.find_element(By.XPATH, '//*[@id=\"Multiple\"]/iframe ')\ndriver.switch_to.frame(outerframe)\ninnerframe = driver.find_element(By.XPATH, \"/html/body/section/div/div/iframe\")\ndriver.switch_to.frame(innerframe)\ndriver.find_element(By.XPATH, \"/html/body/section/div/div/div/input\").send_keys('welcome')\ndriver.switch_to.parent_frame()#directlty switch to parent frame",
        "detail": "selenium_practice.switch_frame_nested",
        "documentation": {}
    },
    {
        "label": "outerframe",
        "kind": 5,
        "importPath": "selenium_practice.switch_frame_nested",
        "description": "selenium_practice.switch_frame_nested",
        "peekOfCode": "outerframe = driver.find_element(By.XPATH, '//*[@id=\"Multiple\"]/iframe ')\ndriver.switch_to.frame(outerframe)\ninnerframe = driver.find_element(By.XPATH, \"/html/body/section/div/div/iframe\")\ndriver.switch_to.frame(innerframe)\ndriver.find_element(By.XPATH, \"/html/body/section/div/div/div/input\").send_keys('welcome')\ndriver.switch_to.parent_frame()#directlty switch to parent frame\ntime.sleep(4)",
        "detail": "selenium_practice.switch_frame_nested",
        "documentation": {}
    },
    {
        "label": "innerframe",
        "kind": 5,
        "importPath": "selenium_practice.switch_frame_nested",
        "description": "selenium_practice.switch_frame_nested",
        "peekOfCode": "innerframe = driver.find_element(By.XPATH, \"/html/body/section/div/div/iframe\")\ndriver.switch_to.frame(innerframe)\ndriver.find_element(By.XPATH, \"/html/body/section/div/div/div/input\").send_keys('welcome')\ndriver.switch_to.parent_frame()#directlty switch to parent frame\ntime.sleep(4)",
        "detail": "selenium_practice.switch_frame_nested",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.Untitled-2",
        "description": "selenium_practice.Untitled-2",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://www.hyrtutorials.com/p/frames-practice.html\")\ndriver.maximize_window()#maximize browser window\ntime.sleep(4)\ntry:\n    driver.switch_to.frame(\"frm1\")\nexcept Exception:\n    print(f\"error orccur in switching i frame\")\n# d;river.find_element(By.LINK_TEXT, )",
        "detail": "selenium_practice.Untitled-2",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.Untitled-2",
        "description": "selenium_practice.Untitled-2",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://www.hyrtutorials.com/p/frames-practice.html\")\ndriver.maximize_window()#maximize browser window\ntime.sleep(4)\ntry:\n    driver.switch_to.frame(\"frm1\")\nexcept Exception:\n    print(f\"error orccur in switching i frame\")\n# d;river.find_element(By.LINK_TEXT, )\ntry:",
        "detail": "selenium_practice.Untitled-2",
        "documentation": {}
    },
    {
        "label": "drp_val",
        "kind": 5,
        "importPath": "selenium_practice.Untitled-2",
        "description": "selenium_practice.Untitled-2",
        "peekOfCode": "drp_val = Select(drp_ele)\ndrp_val.select_by_visible_text(\"Java\")\ntime.sleep(4)",
        "detail": "selenium_practice.Untitled-2",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.uploadFiles",
        "description": "selenium_practice.uploadFiles",
        "peekOfCode": "serv_obj = Service(r\"C:\\Users\\91878\\Downloads\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://formstone.it/components/upload/demo/')\ndriver.maximize_window()\n# form = driver.find_element(By.XPATH, '//*[@id=\"example-0\"]/form')\n# driver.switch_to.frame(form)\ndriver.find_element(By.XPATH, '//*[@id=\"example-0\"]/form/div[1]/input').send_keys(r'C:\\Users\\91878\\python_tutotial\\web_table_data.txt')\ntime.sleep(5)",
        "detail": "selenium_practice.uploadFiles",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.uploadFiles",
        "description": "selenium_practice.uploadFiles",
        "peekOfCode": "driver = webdriver.Chrome(service= serv_obj)\ndriver.get('https://formstone.it/components/upload/demo/')\ndriver.maximize_window()\n# form = driver.find_element(By.XPATH, '//*[@id=\"example-0\"]/form')\n# driver.switch_to.frame(form)\ndriver.find_element(By.XPATH, '//*[@id=\"example-0\"]/form/div[1]/input').send_keys(r'C:\\Users\\91878\\python_tutotial\\web_table_data.txt')\ntime.sleep(5)",
        "detail": "selenium_practice.uploadFiles",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "selenium_practice.window_handling2",
        "description": "selenium_practice.window_handling2",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\ndriver.maximize_window()#maximize browser window\ntime.sleep(5)\ndriver.find_element(By.LINK_TEXT, 'OrangeHRM, Inc').click()\nwindow_ids = driver.window_handles\n# for i in window_ids:\nprint(\"parent id\",window_ids[0])\nprint(\"child id\",window_ids[1])",
        "detail": "selenium_practice.window_handling2",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "selenium_practice.window_handling2",
        "description": "selenium_practice.window_handling2",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\ndriver.maximize_window()#maximize browser window\ntime.sleep(5)\ndriver.find_element(By.LINK_TEXT, 'OrangeHRM, Inc').click()\nwindow_ids = driver.window_handles\n# for i in window_ids:\nprint(\"parent id\",window_ids[0])\nprint(\"child id\",window_ids[1])\n# for wind in window_ids:",
        "detail": "selenium_practice.window_handling2",
        "documentation": {}
    },
    {
        "label": "window_ids",
        "kind": 5,
        "importPath": "selenium_practice.window_handling2",
        "description": "selenium_practice.window_handling2",
        "peekOfCode": "window_ids = driver.window_handles\n# for i in window_ids:\nprint(\"parent id\",window_ids[0])\nprint(\"child id\",window_ids[1])\n# for wind in window_ids:\n#     driver.switch_to.window(wind)\n#     print(driver.title)\nfor wind in window_ids:\n    driver.switch_to.window(wind)\n    if driver.title == \"OrangeHRM\" :",
        "detail": "selenium_practice.window_handling2",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "selenium_practice.writingEXcelfile",
        "description": "selenium_practice.writingEXcelfile",
        "peekOfCode": "file = r'C:\\Users\\91878\\python_tutotial\\selenium_practice\\data1.xlsx'\nworkbook= openpyxl.load_workbook(file)\nsheet = workbook.active\nfor r in range(1,7+1):\n    print(\"  \")\n    for c in range(1, 6+1):\n        sheet.cell(r,c).value = \"welcome\"\nworkbook.save(file)  # save file after each execution",
        "detail": "selenium_practice.writingEXcelfile",
        "documentation": {}
    },
    {
        "label": "sheet",
        "kind": 5,
        "importPath": "selenium_practice.writingEXcelfile",
        "description": "selenium_practice.writingEXcelfile",
        "peekOfCode": "sheet = workbook.active\nfor r in range(1,7+1):\n    print(\"  \")\n    for c in range(1, 6+1):\n        sheet.cell(r,c).value = \"welcome\"\nworkbook.save(file)  # save file after each execution",
        "detail": "selenium_practice.writingEXcelfile",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len('Scripts') - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = '' or os.path.basename(base)\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in '..\\\\Lib\\\\site-packages'.split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if '' else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.Scripts.activate_this",
        "description": "venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "math_sqrt_input",
        "description": "math_sqrt_input",
        "peekOfCode": "x = input(\"Enter a number:\")\n#find the square root of the number:\ny = math.sqrt(int(x))\nprint(f\"The square root of {x} is {y:.2f}\")",
        "detail": "math_sqrt_input",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "math_sqrt_input",
        "description": "math_sqrt_input",
        "peekOfCode": "y = math.sqrt(int(x))\nprint(f\"The square root of {x} is {y:.2f}\")",
        "detail": "math_sqrt_input",
        "documentation": {}
    },
    {
        "label": "organize_files",
        "kind": 2,
        "importPath": "organise_file_script",
        "description": "organise_file_script",
        "peekOfCode": "def organize_files(directory):\n    for file in os.listdir(directory):\n        file_path = os.path.join(directory, file)\n        if os.path.isfile(file_path):\n            ext = file.split('.')[-1]\n            folder = os.path.join(directory, ext.upper())\n            os.makedirs(folder, exist_ok=True)\n            shutil.move(file_path, os.path.join(folder, file))\n# Use raw string to avoid escape issues\norganize_files(r'C:\\Users\\91878\\python_tutotial')",
        "detail": "organise_file_script",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "organise_file_script",
        "description": "organise_file_script",
        "peekOfCode": "b = re.search(\"be\", a)\nprint(b)\nimport os\nimport shutil\ndef organize_files(directory):\n    for file in os.listdir(directory):\n        file_path = os.path.join(directory, file)\n        if os.path.isfile(file_path):\n            ext = file.split('.')[-1]\n            folder = os.path.join(directory, ext.upper())",
        "detail": "organise_file_script",
        "documentation": {}
    },
    {
        "label": "serv_obj",
        "kind": 5,
        "importPath": "read_html_row_column_savein_csv_txt",
        "description": "read_html_row_column_savein_csv_txt",
        "peekOfCode": "serv_obj = Service(r\"C:\\Driver\\chromedriver-win64\\chromedriver-win64\\chromedriver.exe\")\ndriver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://testautomationpractice.blogspot.com/')\ndriver.maximize_window()\ntime.sleep(4)\n# Get column headers and row data\nno_of_col = driver.find_elements(By.XPATH, '//*[@id=\"HTML1\"]/div[1]/table/tbody/tr[1]/th')\nno_rows = driver.find_elements(By.XPATH, \"//table[@name = 'BookTable']//tr\")\n# Open a file to write (text file)\nwith open(\"web_table_data.txt\", \"w\", encoding=\"utf-8\") as f:",
        "detail": "read_html_row_column_savein_csv_txt",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "read_html_row_column_savein_csv_txt",
        "description": "read_html_row_column_savein_csv_txt",
        "peekOfCode": "driver = webdriver.Chrome(service=serv_obj)\ndriver.get('https://testautomationpractice.blogspot.com/')\ndriver.maximize_window()\ntime.sleep(4)\n# Get column headers and row data\nno_of_col = driver.find_elements(By.XPATH, '//*[@id=\"HTML1\"]/div[1]/table/tbody/tr[1]/th')\nno_rows = driver.find_elements(By.XPATH, \"//table[@name = 'BookTable']//tr\")\n# Open a file to write (text file)\nwith open(\"web_table_data.txt\", \"w\", encoding=\"utf-8\") as f:\n    f.write(\"Column Headers:\\n\")",
        "detail": "read_html_row_column_savein_csv_txt",
        "documentation": {}
    },
    {
        "label": "no_of_col",
        "kind": 5,
        "importPath": "read_html_row_column_savein_csv_txt",
        "description": "read_html_row_column_savein_csv_txt",
        "peekOfCode": "no_of_col = driver.find_elements(By.XPATH, '//*[@id=\"HTML1\"]/div[1]/table/tbody/tr[1]/th')\nno_rows = driver.find_elements(By.XPATH, \"//table[@name = 'BookTable']//tr\")\n# Open a file to write (text file)\nwith open(\"web_table_data.txt\", \"w\", encoding=\"utf-8\") as f:\n    f.write(\"Column Headers:\\n\")\n    for col in no_of_col:\n        f.write(col.text + \"\\t\")\n    f.write(\"\\n\\nRows:\\n\")\n    for row in no_rows:\n        f.write(row.text + \"\\n\")",
        "detail": "read_html_row_column_savein_csv_txt",
        "documentation": {}
    },
    {
        "label": "no_rows",
        "kind": 5,
        "importPath": "read_html_row_column_savein_csv_txt",
        "description": "read_html_row_column_savein_csv_txt",
        "peekOfCode": "no_rows = driver.find_elements(By.XPATH, \"//table[@name = 'BookTable']//tr\")\n# Open a file to write (text file)\nwith open(\"web_table_data.txt\", \"w\", encoding=\"utf-8\") as f:\n    f.write(\"Column Headers:\\n\")\n    for col in no_of_col:\n        f.write(col.text + \"\\t\")\n    f.write(\"\\n\\nRows:\\n\")\n    for row in no_rows:\n        f.write(row.text + \"\\n\")\nprint(\"Data written to web_table_data.txt\")",
        "detail": "read_html_row_column_savein_csv_txt",
        "documentation": {}
    }
]